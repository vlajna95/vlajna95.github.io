1. Šta vraća metoda forName(), klase Class? 

Korišćenjem metode forName() može se predstaviti određena klasa i to preko objekta tipa Class.

Boolean promenljivu
Instancu klase prosleđene kao parametar
Ništa
Objekat klase Class 


2. Ako smo kreirali sopstvenu klasu koja nasleđuje klasu EventObject, šta moramo proslediti konstruktoru roditeljske klase? 

Klasa koja nasleđuje klasu EventObject mora pozvati konstruktor roditeljske klase i njemu proslediti parametar koji predstavlja referencu na objekat koji je izazvao događaj.

Interfejs
Izvorni objekat 
Parametre događaja


3. Dopuniti tekst pojmovima koji nedostaju. 

Da bismo korišćenjem refleksije identifikovali klasu, koristimo klasu Class i njen statički metod forName(). U refleksiji, za kreiranje objekta koji predstavlja polje klase se koristi metoda getField(). Ova metoda kao parametar prima naziv polja. 

Korišćenjem refleksije, klase se predstavljaju tipom *Class*. Za kreiranje objekta koji predstavlja polje klase, u refleksiji se koristi metoda *getField()*. Ova metoda kao parametar prima *naziv* polja. 


4. Šta se definiše Factory dizajn šablonom? 

Factory šablon definiše centralizovano kreiranje instanci. To je uglavnom jedna klasa koja služi za kreiranje instanci više srodnih klasa.

Garancija da će biti kreirana samo jedna instanca određene klase 
Centralizovano kreiranje instanci  
Objekat kao parametar kome se pridružuju nove karakteristike 
Slanje poruka pretplaćenim objektima 


5. Dat je sledeći kod: 
public static class OuterClass {
	public static class InnerClass {
		//inner class logic
	}
}
Da li je prikazani kod validan?

Prikazani kod nije validan, zato što je spoljašnja, top-level klasa definisana kao statička, što nije dozvoljeno. Statičke mogu biti samo ugnežđene klase. 

Jeste 
Nije 


6. Šabloni se dele na tri grupe: 

Šabloni se dele na tri osnovne kategorije: šablone za kreaciju (kreiranje), šablone strukture i šablone ponašanja, pri čemu svaki od ovih naziva intuitivno oslikava upotrebno okruženje šablona. 

složene, proste i napredne 
strukturne, kreacione i šablone ponašanja  
Singleton, Factory i Decorator 
male, velike i srednje 


7. Da bi objekti neke klase mogli da slušaju određeni događaj, takva klasa mora da obezbedi: 

Svi slušaoci događaja se karakterišu zajedničkim interfejsom koji implementiraju i koji ih čini legitimnim slušaocima nekog događaja. 

polje Listen 
implementaciju interfejsa koji predstavlja slušaoce  
metodu Listen 
metodu Run 


8. Kada jedna klasa nasleđuje klasu EventObject, njeni objekti predstavljaju: 

Klasa EventObject predstavlja osnovnu klasu događaja. 

nizove bajtova 
enumeracije 
tokove 
događaje  


9. Šta vraća metoda getDeclaredConstructors(), klase Class? 

Metoda getDeclaredConstructors() će vratiti sve konstruktore jedne klase bez obzira na njihov nivo pristupa. 

Vraća sva polja klase 
Vraća sve konstruktore klase  
Vraća konstruktor klase 
Vraća sve metode klase 


10. Dopuniti tekst rečima koje nedostaju. 

Lambda izrazi koriste se kako bi uprostili kod koji je potreban za kreiranje anonimnih klasa. Jednom definisan lambda izraz se može koristiti na jednom mestu. 

Lambda izrazi koriste se kako bi uprostili kod koji je potreban za kreiranje *anonimnih* klasa. Jednom definisan lambda izraz može se koristiti na *jednom mestu*. 


11. Šta obavlja metoda getField() u svetu refleksije? 

U refleksiji, metoda getField() vraća objekat koji reprezentuje jedno polje klase. 

Vraća polje klase  
Vraća klasu 
Vraća metod klase 
Vraća niz polja klase 


12. Kada jedna klasa preuzme osobine druge klase, znači da je došlo do: 

Nasleđivanje definiše odnos između klasa, a samim tim i objekata u jednom objektno orijentisanom sistemu. Nasleđivanjem, klasa koja nasleđuje preuzima određene osobine klase koju nasleđuje. 

nasleđivanja  
virtualizacije 
polimorfovanja 
instanciranja 


13. Dopuniti sledeći tekst pojmovima koji nedostaju: 

Programiranje koje podrazumeva praćenje i obradu događaja u toku izvršenja aplikacije naziva se event-based programiranje. U Javi, klase za rukovanje događajima nalaze se u paketu java.util. 

Programiranje koje podrazumeva praćenje i obradu događaja u toku izvršavanja aplikacije naziva se *event-based* programiranje. Klase za rukovanje događajima nalaze se u paketu *java.util*. 


14. Sakrivanje kompleksne logike neke klase od korisnika naziva se: 

Pojam enkapsulacije podrazumeva sakrivanje kompleksne logike neke funkcionalnosti. Unutar Java klasa enkapsuliraju se svojstva i metode. 

polimorfizam 
nasleđivanje 
enkapsulacija  
instanciranje 


15. Koliko podrazumevani konstruktor u Javi ima parametara? 

Podrazumevani konstruktor u Javi nema parametre. 

Dva 
Jedan 
Tri 
Nijedan  


16. Koliko je dizajn šablona moguće upotrebiti u jednoj aplikaciji? 

Šabloni predstavljaju određena načela, odnosno „dobru praksu”, tako da nisu nešto što se može prekopirati ili iskoristiti napravljeno. U jednoj aplikaciji moguće je upotrebiti proizvoljan broj šablona. 

Jedan 
Nijedan 
Neograničeno  
Više od jedan i manje od deset 


17. Dat je sledeći kod: 
public class MyClass {
	static MyClass instance;
	
	private MyClass() { }
	
	public static MyClass getInstance() {
		if(MyClass.instance==null) {
			instance = new MyClass();
		}
		return instance;
	}
}
Koji dizajn šablon je ilustrovan prikazanim kodom? 

Prikazani kod predstavlja logiku za kreiranje klase koju je moguće instancirati samo jednom, a to je načelo Singleton šablona. 

Decorator 
Observer 
Singleton  
Factory 


18. Šta se definiše Singleton dizajn šablonom? 

Singleton šablon definiše kreiranje klasa koje mogu imati samo jednu instancu. 

Slanje poruka pretplaćenim entitetima 
Klasa sa samo jednom instancom  
Kreiranje instance klase na osnovu parametara 
Proširivanje postojećih funkcionalnosti 


19. Kada je potrebno dobiti niz svih metoda jedne klase, koristi se metoda: 

Za dobijanje svih metoda neke klase pomoću refleksije, može se koristiti metoda getMethods(), koja vraća niz objekata tipa Method. 

getMethods()  
Fields() 
getFields() 
Methods() 


20. Dat je sledeći kod: 
public interface Distributer {
	void addSubscriber(Subscriber s);
	void cancelSubscriber(Subscriber s);
	void sendUpdate(String msg);
}
Za koji dizajn šablon je karakterističan prikazani interfejs? 

Kod Observer šablona razlikuju se pretplatnici i emiteri. Pri tome je potrebno da emiter poseduje logiku za dodavanje pretplatnika, uklanjanje pretplatnika i slanje obaveštenja, što su metode koje možemo videti unutar upravo prikazanog interfejsa. 

Observer  
Decorator 
Singleton 
Factory 


21. Šta je povratna vrednost metode getFields(), objekta klase Class? 

Metoda getFileds() vraća niz objekata tipa Field. 

Niz Field objekata 
Niz karaktera 
Field objekat 
Niz Stringova 
