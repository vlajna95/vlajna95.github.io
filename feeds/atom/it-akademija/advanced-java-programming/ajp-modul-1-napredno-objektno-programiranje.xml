<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DP Tech - IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje</title><link href="https://vlajna95.github.io/" rel="alternate"></link><link href="https://vlajna95.github.io/feeds/atom/it-akademija/advanced-java-programming/ajp-modul-1-napredno-objektno-programiranje.xml" rel="self"></link><id>https://vlajna95.github.io/</id><updated>2022-05-22T08:44:00+02:00</updated><subtitle>Tvoj omiljeni blog</subtitle><entry><title>AJP 1.6. Dizajn šabloni</title><link href="https://vlajna95.github.io/articles/ajp-16-dizajn-sabloni" rel="alternate"></link><published>2022-05-22T08:44:00+02:00</published><updated>2022-05-22T08:44:00+02:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-05-22:/articles/ajp-16-dizajn-sabloni</id><summary type="html">&lt;p&gt;Primena dizajn šablona u programskom jeziku Java&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Obrisi modernog programiranja datiraju od pre više od 30 godina. Tokom tog vremenskog perioda, programski jezici su korišćeni za rešavanje različitih problema. Ipak, veliki broj problema u programiranju iznova se i iznova ponavlja bez obzira na to o kojoj vrsti softverskog proizvoda je reč. Takvi česti problemi su tokom vremena detektovani i za njih su se ustalila određena rešenja, koja su se u praksi pokazala kao dobra. Reč je o rešenjima koja su artikulisana pojmom softverskih dizajn šablona. Njima će biti posvećena lekcija koja je pred vama. &lt;/p&gt;
&lt;h2 id="sta-su-softverski-dizajn-sabloni"&gt;Šta su softverski dizajn šabloni?&lt;/h2&gt;
&lt;p&gt;Softverski dizajn šabloni (&lt;em&gt;software design patterns&lt;/em&gt;) opisuju rešenja veoma čestih problema do kojih dolazi prilikom dizajniranja unutrašnje strukture nekog softverskog proizvoda. Reč je, zapravo, o dokazanim pristupima, odnosno praksama koje su se tokom vremena pokazale kao dobre. &lt;/p&gt;
&lt;p&gt;Bitno je razumeti da dizajn šabloni nisu gotova rešenja, već samo generalizovana, koncizna uputstva koja se mogu koristiti za konkretnu implementaciju rešenja. Stoga dizajn šabloni nisu vezani ni za jedan programski jezik, pa se njihova načela mogu primeniti prilikom kreiranja različitih tipova aplikacija, za različite platforme. &lt;/p&gt;
&lt;p&gt;Korišćenjem softverskih dizajn šablona ubrzava se proizvodnja, naročito ukoliko se ona odvija u timskom okruženju. Naime, realizacija softverskih dizajn šablona široko je poznata, pa programeri koji rade na istom projektu mnogo lakše mogu da se snađu u kodu koji je pisao neki drugi programer. &lt;/p&gt;
&lt;h2 id="koji-dizajn-sabloni-postoje"&gt;Koji dizajn šabloni postoje?&lt;/h2&gt;
&lt;p&gt;Svi softverski dizajn šabloni se dele na tri grupe: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;šabloni kreiranja (&lt;em&gt;creational patterns&lt;/em&gt;) &lt;/li&gt;
&lt;li&gt;strukturni šabloni (&lt;em&gt;structural patterns&lt;/em&gt;) &lt;/li&gt;
&lt;li&gt;šabloni ponašanja (&lt;em&gt;behavioral patterns&lt;/em&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sve tri upravo navedene grupe poseduju ilustrativne nazive, koji oslikavaju intuitivno upotrebno okruženje šablona koji pripadaju konkretnoj grupi. Svaka od grupa poseduje veliki broj različitih šablona. U ovoj lekciji biće ilustrovana načela nekoliko najpoznatijih dizajn šablona i njihova realizacija u programskom jeziku Java: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observer&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Factory&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decorator&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="singleton"&gt;&lt;strong&gt;Singleton&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; je dizajn šablon koji propisuje postojanje samo jedne instance nekog tipa. Drugim rečima, &lt;strong&gt;Singleton&lt;/strong&gt; nalaže rukovanje nekim tipom koje se uvek obavlja korišćenjem jedne iste instance. Tako uz poštovanje &lt;strong&gt;Singleton&lt;/strong&gt; šablona nije moguće kreirati dva objekta jednog istog tipa. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; je jedan od najpopularnijih softverskih dizajn šablona, koji se primenjuje prilikom programiranja različitih aspekata aplikacija koje zahtevaju postojanje samo jednog objekta tokom čitavog životnog toka aplikacije. &lt;/p&gt;
&lt;p&gt;U dosadašnjem toku ovog kursa u više navrata ste imali prilike da vidite da se korišćenjem jedne klase može napraviti proizvoljan broj instanci, odnosno objekata: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Product product2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product2));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prikazani kod će proizvesti rezultat &lt;code&gt;false&lt;/code&gt;, jer promenljive &lt;code&gt;product1&lt;/code&gt; i &lt;code&gt;product2&lt;/code&gt; čuvaju reference na dva potpuno nezavisna objekta klase &lt;code&gt;Product&lt;/code&gt;. Ovo je ponašanje sa kojim smo se do sada susretali, a kao što je rečeno, podrazumeva da se na osnovu jedne klase može kreirati proizvoljan broj nezavisnih instanci (slika 6.1). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.1. Na osnovu regularne klase moguće je kreirati proizvoljan broj objekata" src="/images/AdvancedJavaProgramming/1_06_01.png"/&gt;
&lt;figcaption&gt;Slika 6.1. Na osnovu regularne klase moguće je kreirati proizvoljan broj objekata&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ipak, u nekim situacijama može se javiti potreba da se definiše ponašanje po kojem se određena klasa može instancirati samo jednom. Upravo to osigurava &lt;strong&gt;Singleton&lt;/strong&gt; dizajn šablon (slika 6.2). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.2. Singleton klasa može imati samo jednu instancu" src="/images/AdvancedJavaProgramming/1_06_02.png"/&gt;
&lt;figcaption&gt;Slika 6.2. Singleton klasa može imati samo jednu instancu&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Sa slike 6.2. se može videti da &lt;strong&gt;Singleton&lt;/strong&gt; osigurava da se svakim instanciranjem jedne klase dobija identična instanca. &lt;/p&gt;
&lt;p&gt;U Java programskom jeziku, &lt;strong&gt;Singleton&lt;/strong&gt; se realizuje vrlo jednostavno. Potrebno je obaviti nekoliko koraka koji su ilustrovani u nastavku. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Onemogućavanje direktnog instanciranja klase &lt;br/&gt;
    Pod direktnim instanciranjem klase podrazumeva se instanciranje upotrebom ključne reči &lt;code&gt;new&lt;/code&gt; i pozivom konstruktora. Kako bi se tako nešto onemogućilo izvan klase, dovoljno je unutar klase definisati privatni konstruktor: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kreiranje polja koje će čuvati referencu na instancu klase &lt;br/&gt;
    S obzirom na to da se kod &lt;strong&gt;Singleton&lt;/strong&gt; šablona klasa ne može instancirati na tradicionalni način, neophodno je unutar nje definisati mehanizam za predstavljanje instance. Tako se kod &lt;strong&gt;Singleton&lt;/strong&gt; šablona instanca čuva unutar privatnog, statičkog polja klase: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kreiranje mehanizma za pristup instanci &lt;strong&gt;Singletona&lt;/strong&gt; &lt;br/&gt;
    Kada imamo polje za čuvanje instance, preostaje da se definiše i javna metoda za pristup takvom polju: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;Logger.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;instance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			instance &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Metoda za dobijanje instance imenovana je nazivom &lt;code&gt;getInstance()&lt;/code&gt;. Unutar nje se obavlja vrlo jednostavna logika. Proverava se da li je instanca klase &lt;code&gt;Logger&lt;/code&gt; već kreirana i samo ukoliko nije, obavlja se njeno kreiranje. Ukoliko instanca već postoji, kao povratna vrednost se isporučuje njena referenca, čime se osigurava da će svakim pozivanjem metode &lt;code&gt;getInstance()&lt;/code&gt; biti isporučena referenca na istovetan objekat klase &lt;code&gt;Logger&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Ukoliko pokušamo da upravo kreiranu klasu instanciramo na tradicionalni način, doći će do greške, s obzirom na to da je konstruktor privatan. Kako bi se dobio objekat &lt;strong&gt;Singleton&lt;/strong&gt; klase, koristi se sledeći pristup: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Logger logger &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Vrlo je bitno razumeti da će svako pozivanje  &lt;code&gt;getInstance()&lt;/code&gt; metode imati za efekat isporučivanje reference na identičan objekat, u šta se lako možemo uveriti: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Logger.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;instance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			instance &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program1.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Logger logger &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Logger logger1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(logger1));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Za razliku od primera sa početka ove lekcije, prikazani kod sada proizvodi vrednost &lt;code&gt;true&lt;/code&gt;, što jasno govori da je reč o dve promenljive koje čuvaju referencu na identičan objekat. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Klasa &lt;code&gt;Logger&lt;/code&gt;&lt;/strong&gt; &lt;br/&gt;
Naziv upravo kreirane &lt;strong&gt;Singleton&lt;/strong&gt; klase nije izabran slučajno. Naime, jedna od realnih situacija za upotrebu &lt;strong&gt;Singleton&lt;/strong&gt; šablona jesu situacije u kojima je potrebno napraviti klasu za logovanje informacija o unutrašnjem funkcionisanju programa. Veoma česta praksa u realnim aplikacijama jeste postojanje takve klase, koja unutar fajla ili posebnog skladišta podataka beleži sve informacije koje mogu biti značajne za programere koji su aplikaciju kreirali. Tokom izvršavanja aplikacije, potrebno je da postoji samo jedna instanca klase za logovanje. Drugim rečima, postojanje većeg broja instanci klase za logovanje nema smisla, pa je upravo zbog toga klasa &lt;code&gt;Logger&lt;/code&gt; idealan kandidat za demonstraciju &lt;strong&gt;Singleton&lt;/strong&gt; dizajn šablona. &lt;/p&gt;
&lt;div class="question"&gt;
&lt;p&gt;Ukoliko je potrebno osigurati da određena klasa ima samo jednu instancu, koji šablon za dizajn softverskih komponenti se koristi? &lt;/p&gt;
&lt;div class="answers"&gt;&lt;input id="single_instance_correct" name="single_instance_correct" type="hidden" value="notelgnis"/&gt;&lt;input id="revresbo" name="single_instance" type="radio" value="Observer"/&gt;&lt;label for="revresbo"&gt;Observer&lt;/label&gt;&lt;br/&gt;
&lt;input id="yrotcaf" name="single_instance" type="radio" value="Factory"/&gt;&lt;label for="yrotcaf"&gt;Factory&lt;/label&gt;&lt;br/&gt;
&lt;input id="cvm" name="single_instance" type="radio" value="MVC"/&gt;&lt;label for="cvm"&gt;MVC&lt;/label&gt;&lt;br/&gt;
&lt;input id="notelgnis" name="single_instance" type="radio" value="Singleton"/&gt;&lt;label for="notelgnis"&gt;Singleton&lt;/label&gt;&lt;br/&gt;
&lt;/div&gt;
&lt;button class="ok" data-correct="single_instance_correct" data-question="single_instance" onclick="checkAnswer(this, 'Bravo!', 'Hmmm... no.')" type="button"&gt;OK&lt;/button&gt;&lt;/div&gt;
&lt;h2 id="observer"&gt;&lt;strong&gt;Observer&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Observer&lt;/strong&gt; je jedan od najpoznatijih šablona ponašanja. On omogućava razmenu obaveštenja između većeg broja objekata. Drugim rečima, &lt;strong&gt;Observer&lt;/strong&gt; šablon omogućava da se stanje jednog objekta emituje različitim objektima koji taj objekat nadgledaju (slika 6.3). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.3. Način funkcionisanja Observer dizajn šablona" src="/images/AdvancedJavaProgramming/1_06_03.png"/&gt;
&lt;figcaption&gt;Slika 6.3. Način funkcionisanja Observer dizajn šablona&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Na slici 6.3. možete da vidite najznačajnije elemente koji postoje unutar &lt;strong&gt;Observer&lt;/strong&gt; šablona. Ovaj šablon poznaje dve vrste objekata: objekte tipa &lt;strong&gt;Observer&lt;/strong&gt; i &lt;strong&gt;Observable&lt;/strong&gt;. Kako bi se postigla što bolja apstrakcija i univerzalnost, ova dva tipa se predstavljaju intefejsima. &lt;strong&gt;Observer&lt;/strong&gt; implementiraju svi konkretni tipovi koji žele da dobijaju obaveštenja, dok interfejs &lt;strong&gt;Observable&lt;/strong&gt; implementiraju tipovi koji imaju potrebu da generišu i šalju obaveštenja. Konkretni tipovi koji generišu obaveštanje u &lt;strong&gt;Observer&lt;/strong&gt; šablonu se nazivaju &lt;em&gt;Subject&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Nije teško zaključiti da se na &lt;strong&gt;Observer&lt;/strong&gt; šablonu zasniva razmena događaja između objekata, što je pristup koji je obrađen u jednoj od prethodnih lekcija. Stoga smo se mi sa &lt;strong&gt;Observer&lt;/strong&gt; šablonom već susretali, pa će u nastavku biti prikazan nešto jednostavniji primer, koji će se fokusirati isključivo na osnovne osobine ovog šablona. &lt;/p&gt;
&lt;p&gt;Kako bismo demonstrirali &lt;strong&gt;Observer&lt;/strong&gt; šablon, prvo ćemo kreirati dva interfejsa, koji će predstavljati dva tipa objekata koji učestvuju u komunikaciji. Objekti koji mogu da budu obavešteni o nečemu zasnivaju se na ovakvom interfejsu: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Observer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Observer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String args);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Objekti koji će moći da proizvedu obaveštenja zasnivaće se na ovakvom interfejsu: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Observable.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Observable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer s);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer s);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String msg);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Nakon kreiranja interfejsa, oni se mogu iskoristiti za izgradnju konkretnih tipova. Evo prvo klase koja će poslužiti za kreiranje objekata koji će moći da primaju obaveštenja: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;ObserverA.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;ObserverA&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	String name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;ObserverA&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name){&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;name&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String msg) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer "&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #48b685"&gt;". Message from observable: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; msg);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Radi jednostavnosti primera, čim stigne poruka od objekta koji se nadzire, takva poruka će biti ispisana na izlazu. Pri tome svaki objekat tipa &lt;strong&gt;Observer&lt;/strong&gt; poseduje i sopstveno ime koje se definiše prilikom instanciranja klase. &lt;/p&gt;
&lt;p&gt;Klasa koja će predstavljati objekte koji će moći da šalju obaveštenja nešto je kompleksnija, zato što se unutar nje moraju implementirati tri metode i jedno svojstvo koje će čuvati referencu na niz pretplatnika: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Subject.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Subject&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; observers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer observer) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newObservers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		newObservers&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; observer;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		observers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer observer) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;++&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (observer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newObservers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, indexOfElementToRemove);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers, indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newObservers, indexOfElementToRemove, observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		observers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String msg) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Observer observer : observers) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			observer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(msg);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Kako bismo se uverili da sve funkcioniše ispravno, unutar &lt;code&gt;main()&lt;/code&gt; metode našeg Java programa postavićemo sledeći kod: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program2.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Subject subject &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Subject();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer o1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ObserverA(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer 1"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer o2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ObserverA(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer 2"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer o3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ObserverA(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer 3"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o3);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"new update"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"new update1"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Primer proizvodi sledeći rezultat: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Observer Observer &lt;span style="color: #f99b15"&gt;1&lt;/span&gt;. Message from observable: new update
Observer Observer &lt;span style="color: #f99b15"&gt;2&lt;/span&gt;. Message from observable: new update
Observer Observer &lt;span style="color: #f99b15"&gt;3&lt;/span&gt;. Message from observable: new update
Observer Observer &lt;span style="color: #f99b15"&gt;3&lt;/span&gt;. Message from observable: new update1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;S obzirom na to da su prilikom slanja prve poruke sva tri objekta u listi pretplatnika, aktiviraju se &lt;code&gt;update()&lt;/code&gt; metode u tri objekta koji predstavljaju pretplatnike. Nakon uklanjanja pretplatnika &lt;code&gt;o2&lt;/code&gt; i &lt;code&gt;o1&lt;/code&gt; iz liste, sledeće ažuriranje podrazumeva slanje poruke samo jednom pretplatniku - &lt;code&gt;o3&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="factory"&gt;&lt;strong&gt;Factory&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Factory&lt;/strong&gt; je šablon kreiranja koji se koristi kada je potrebno kreirati posredničku klasu za kreiranje objekata određenog tipa. Drugim rečima, objekti određenog tipa se ne kreiraju na tradicionalni način, upotrebom konstruktora i ključne reči &lt;code&gt;new&lt;/code&gt;, već posredstvom specijalne klase koja se naziva kao i sam šablon - &lt;code&gt;Factory&lt;/code&gt;. Sve to izgleda kao na slici 6.4. &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.4. Factory klasa" src="/images/AdvancedJavaProgramming/1_06_04.png"/&gt;
&lt;figcaption&gt;Slika 6.4. Factory klasa&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Factory&lt;/strong&gt; šablon će u nastavku biti ilustrovan jednim primerom koji će modelovati nekoliko različitih vrsta korisnika. Naime, česta je praksa da se u aplikacijima koje rukuju korisnicima oni dele na nekoliko grupa, u zavisnosti od privilegaija koje imaju prilikom korišćenja aplikacije. Upravo jedan takav primer, u kome će postojati tri različite vrste korisnika, biće prikazan u nastavku. Tipovi korisnika će biti: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Viewer&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Admin&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Superuser&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upravo prikazani tipovi korisnika u našem primeru ujedno će biti i konkretne klase koje će se koristiti za modelovanje odgovarajućeg tipa korisnika. S obzirom na to da su srodne, sve one mogu da naslede zajedničku apstraktnu klasu &lt;code&gt;User&lt;/code&gt;, koja može poslužiti za definisanje nekih zajedničkih osobina svih korisnika: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;User.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;User&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String username;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;User&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; username;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Klasa &lt;code&gt;User&lt;/code&gt; je apstraktna i unutar sebe poseduje samo jedno svojstvo, kojim se definiše korisničko ime. Konstruktor prihvata jedan parametar i njime se inicijalizuje svojstvo &lt;code&gt;username&lt;/code&gt;. Ovakvu klasu nasleđuju tri konkretne klase. &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Viewer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Viewer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Viewer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Viewer "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;" created."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Admin.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Admin&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Admin&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Admin "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;" created."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Superuser.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Superuser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Superuser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Superuser "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;" created."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Radi jednostavnosti, sve prikazane klase poseduju minimalnu logiku, odnosno samo konstruktor unutar koga se prvo poziva konstruktor roditeljske klase, a zatim se ispisuje poruka da je korisnik odgovarajućeg tipa i imena kreiran. &lt;/p&gt;
&lt;p&gt;Svaka od upravo kreiranih klasa može se instancirati na standardni način. Na primer: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Viewer viewer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Viewer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"John"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Admin admin &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Admin(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Jack"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Superuser boss &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Superuser(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Josh"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na ovaj način se u programu kreira po jedan korisnik svakog tipa. Kreiranje objekata biće propraćeno ispisom sledećih poruka unutar konzole: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Viewer John created.
Admin Jack created.
Superuser Josh created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Veoma česta situacija u realnim aplikacijama prilikom rukovanja korisnicima jeste to da njihov tip nije unapred poznat, već se utvrđuje dinamički, tokom izvršavanja aplikacije. To praktično znači da većina aplikacija poseduje neku vrstu forme za prijavljivanje u koju je neophodno uneti korisničko ime i lozinku. Na osnovu unetih podataka, aplikacija utvrđuje o kojoj vrsti korisnika je reč, odnosno da li je korisnik tipa &lt;code&gt;Viewer&lt;/code&gt;, &lt;code&gt;Admin&lt;/code&gt; ili &lt;code&gt;Superuser&lt;/code&gt;. Stoga se veoma često može dogoditi da na više mesta unutar svoje aplikacije posedujemo kod koji može da izgleda ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;User user &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;switch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(userType) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"viewer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Viewer(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"admin"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Admin(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"superuser"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Superuser(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;default&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je jedna uslovna konstrukcija u kojoj se u zavisnosti od vrednosti kontrolne promenljive (&lt;code&gt;userType&lt;/code&gt;) obavlja instanciranje odgovarajuće klase koja predstavlja korisnika. S obzirom na to da su velike šanse da će ovakva provera biti potrebna na više mesta unutar aplikacije, idealno je nju enkapsulirati unutar jedne &lt;strong&gt;Factory&lt;/strong&gt; klase: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;UserFactory.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;UserFactory&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String userType, String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		User user &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;switch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(userType) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"viewer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Viewer(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"admin"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Admin(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"superuser"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Superuser(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;default&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; user;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Ovo je klasičan primer &lt;strong&gt;Factory&lt;/strong&gt; dizajn šablona na delu. Kreirana je nova &lt;code&gt;UserFactory&lt;/code&gt; klasa, kao centralizovano mesto za instanciranje objekata koji predstavljaju korisnike. Sada se objekti korisnika mogu kreirati na sledeći način: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;User user1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; UserFactory.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"admin"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Ron"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;User user2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; UserFactory.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"viewer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Ben"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;User user3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; UserFactory.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"superuser"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Tom"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na ovaj način su centralizovano kreirana tri objekta korisnika različitog tipa. Kod će na izlazu proizvesti sledeći ispis: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Admin Ron created.
Viewer Ben created.
Superuser Tom created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id="decorator"&gt;&lt;strong&gt;Decorator&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Decorator&lt;/strong&gt; je strukturni šablon koji omogućava dodavanje, odnosno proširivanje funkcionalnosti postojećih tipova. Implementira se kreiranjem posebne klase koja se naziva &lt;code&gt;Decorator&lt;/code&gt;, unutar koje se objekti nekog tipa proširuju dodatnim osobinama ili funkcionalnostima. Tako &lt;strong&gt;Decorator&lt;/strong&gt; šablon omogućava da se mogućnosti tipova prošire bez klasičnog nasleđivanja. Drugim rečima, &lt;code&gt;Decorator&lt;/code&gt; klasa nije u direktnoj hijerarhijskoj vezi sa klasom koju dekoriše, već predstavlja neku vrstu njenog omotača (slika 6.5). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.5. Decorator šablon" src="/images/AdvancedJavaProgramming/1_06_05.png"/&gt;
&lt;figcaption&gt;Slika 6.5. Decorator šablon&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Decorator&lt;/strong&gt; šablon će biti ilustrovan na primeru jednog tipa kojim se u Java programu predstavljaju pravougaonici: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Rectangle.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Klasa &lt;code&gt;Rectangle&lt;/code&gt; koristi se za modelovanje pravougaonika. Svojstva &lt;code&gt;a&lt;/code&gt; i &lt;code&gt;b&lt;/code&gt; se koriste za predstavljanje dužine stranica, čije vrednosti je moguće postaviti korišćenjem konstruktora koji prihvata dva parametra. Pored toga, klasa &lt;code&gt;Rectangle&lt;/code&gt; poseduje i metodu za računanje površine sa nazivom &lt;code&gt;area()&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Korišćenjem &lt;strong&gt;Decorator&lt;/strong&gt; šablona, objekti upravo kreirane klase se mogu proširiti na sledeći način: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;RectangleDecorator.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;RectangleDecorator&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;protected&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Rectangle rectangle;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;RectangleDecorator&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Rectangle rectangle) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; rectangle;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;code&gt;RectangleDecorator&lt;/code&gt; je klasičam primer implementacije &lt;strong&gt;Decorator&lt;/strong&gt; šablona. Unutar ove klase obavlja se proširivanje funkcionalnosti &lt;code&gt;Rectangle&lt;/code&gt; objekata jednom novom metodom koja je namenjena računanju obima. &lt;/p&gt;
&lt;p&gt;Konačno, evo kako može da izgleda upotreba &lt;code&gt;Decorator&lt;/code&gt; klase: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program3.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program3&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		RectangleDecorator rd &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; RectangleDecorator(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Rectangle(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;3&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(rd.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(rd.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Prikazanim naredbama obavljeno je kreiranje objekta &lt;code&gt;RectangleDecorator&lt;/code&gt; klase. Prilikom kreiranja takvog objekta, konstruktoru je prosleđen objekat &lt;code&gt;Rectangle&lt;/code&gt; klase koji će &lt;code&gt;Decorator&lt;/code&gt; da proširi. Nakon toga se obavlja računanje površine i obima i rezultati se prikazuju na izlazu. &lt;/p&gt;
&lt;h2 id="javabeans-konvencija"&gt;&lt;strong&gt;JavaBeans konvencija&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Kada već govorimo o softverskim dizajn šablonima i različitim dobrim praksama za kreiranje unutrašnje objektne strukture Java programa, dobro je spomenuti još jedan pojam koji je značajan za Java jezik. Naime, u Java jeziku postoji jedna konvencija, odnosno standard koji se naziva &lt;strong&gt;JavaBeans&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;JavaBeans je konvencija koja definiše osobine tipova koji se nazivaju Java Bean. Java Bean je zapravo svaka klasa koja zadovoljava nekoliko jednostavnih pravila: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;klasa mora imati javni konstruktor bez parametara &lt;/li&gt;
&lt;li&gt;polja klase moraju biti privatna i moraju postojati odgovarajuće javne &lt;code&gt;get&lt;/code&gt; i &lt;code&gt;set&lt;/code&gt; metode za rukovanje njima izvan matične klase &lt;/li&gt;
&lt;li&gt;klasa mora implementirati interfejs &lt;code&gt;Serializable&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaBeans konvencija je primarno namenjena za kreiranje softverskih komponenti grafičkog korisničkog okruženja. O kreiranju grafičkog okruženja još nismo govorili, ali je bitno da znate da se pojedinačne komponente takvog okruženja predstavljaju objektima, odnosno instancama nekih klasa. Takođe, grafička okruženja se najčešće kreiraju pomoću određenih pomagala – grafičkih editora. Kako bi takvi editori mogli da funkcionišu adekvatno, oni se oslanjaju na upravo spomenutu konvenciju JavaBeans. Ipak, JavaBeans konvencija nije ograničena na komponente grafičkog korisničkog okruženja, pa se s njom možemo susresti i prilikom rada sa raznim drugim celinama Java platforme. &lt;/p&gt;
&lt;p&gt;Evo kako može izgledati jedna klasa koja zadovoljava JavaBeans konvenciju: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;CarBean.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.io.Serializable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;CarBean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Serializable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String make;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;CarBean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMake&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; make;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setMake&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		make &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Kod ilustruje klasu sa nazivom &lt;code&gt;CarBean&lt;/code&gt;. Reč je o klasi koja u potpunosti zadovoljava &lt;strong&gt;JavaBeans&lt;/strong&gt; konvenciju: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;klasa implementira interfejs &lt;code&gt;Serializable&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;klasa poseduje javni konstruktor, bez parametara &lt;/li&gt;
&lt;li&gt;polja unutar klase su privatna i postoje &lt;code&gt;get&lt;/code&gt; i &lt;code&gt;set&lt;/code&gt; metode kako bi se njima rukovalo izvan klase&lt;/li&gt;
&lt;/ul&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="dizajn šabloni"></category><category term="design patterns"></category></entry><entry><title>AJP 1.5. Refleksija</title><link href="https://vlajna95.github.io/articles/ajp-15-refleksija" rel="alternate"></link><published>2022-04-24T02:24:00+02:00</published><updated>2022-04-24T02:24:00+02:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-04-24:/articles/ajp-15-refleksija</id><summary type="html">&lt;p&gt;Refleksija u programskom jeziku Java&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Osnova programskog jezika Java jesu objekti, klase i interfejsi. Konkretne i apstraktne klase i interfejsi omogućavaju stvaranje referentnih tipova koji su potrebni programima koje kreiramo. Objekti nastaju na osnovu klasa i predstavljaju instance tipa koji je definisan klasama i interfejsima na čijoj osnovi su takvi objekti nastali. Tokom izvršavanja programa (&lt;em&gt;runtime&lt;/em&gt;) imamo mogućnost da instanciramo klase i koristimo svojstva i metode koje su definisane unutar objekata i klasa. Ipak, sve do sada, ni na koji način nismo bili u mogućnosti da izmenimo strukturu kreiranih tipova tokom izvršavanja programa. &lt;/p&gt;
&lt;p&gt;Osobine tipova se definišu pisanjem koda. Kada se završi pisanje koda i pokrene program, do sada nismo bili u mogućnosti da dođemo do informacija o tipovima niti da utičemo na njihove osobine. Ipak, programski jezik Java poseduje skup funkcionalnosti koje omogućavaju da se tako nešto obavi. Takav skup funkcionalnosti se naziva refleksija i to je pojam kome će biti posvećena lekcija pred vama. &lt;/p&gt;
&lt;h2 id="sta-je-refleksija"&gt;Šta je refleksija?&lt;/h2&gt;
&lt;p&gt;Refleksija je skup funkcionalnosti koji postoji unutar Java platforme i omogućava da se u toku izvršavanja programa manipuliše arhitekturom tipova. Ovakva definicija može zvučati komplikovano, ali je zapravo reč o sasvim jednostavnom konceptu. Refleksija u Javi omogućava da se tokom izvršavanja programa ispita struktura klasa i interfejsa i njihovih članova – polja, konstruktora i metoda. Sve to na kraju omogućava da se napiše kod koji će tokom izvršavanja programa da rukuje tipovima, svojstvima i metodama čija imena i osobine nisu unapred poznati (slika 5.1). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 5.1. Java refleksija" src="/images/AdvancedJavaProgramming/1_05_01.png"/&gt;
&lt;figcaption&gt;Slika 5.1. Java refleksija&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Refleksija je veoma korisna kada je podatke iz jednog oblika potrebno pretvoriti u neki drugi. Na primer, veoma čest oblik za predstavljanje podataka jeste format koji se zove &lt;strong&gt;JSON&lt;/strong&gt;. Takav format se veoma često koristi za razmenu podataka između više aplikacija ili aplikativnih celina. Naime, unutar programa, podaci postoje u objektnom obliku. Kako bi se prosledili nekoj drugoj aplikaciji preko mreže, pribegava se njihovom transformisanju u JSON oblik. U obavljanju takvog posla, refleksija može biti i više nego korisna, pošto omogućava da se detektuju sva svojstva objekata koje je potrebno pretvoriti u neki drugi oblik. &lt;/p&gt;
&lt;p&gt;Refleksija se može koristiti i za kreiranje univerzalne funkcionalnosti za čuvanje i izmenu podataka u nekoj bazi podataka. Naime, podaci se u bazama čuvaju u tabelama sa redovima i kolonama, pa se refleksija može koristiti za kreiranje funkcionalnosti koja će automatski, na osnovu naziva svojstava, da generiše nazive kolona. Refleksija se može koristiti i za postizanje konverzije podataka u suprotnom smeru – na osnovu naziva kolona unutar kojih se nalaze podaci koji su pročitani iz baze podataka može se napisati funkcionalnost koja automatski poziva odgovarajuću &lt;em&gt;get&lt;/em&gt; ili &lt;em&gt;set&lt;/em&gt; metodu. &lt;/p&gt;
&lt;div class="question"&gt;
&lt;p&gt;Da bismo u toku izvršavanja aplikacije mogli da dobavimo neke informacije kao što su tip određenog objekta, spisak polja određene klase i slično, potrebno je koristiti: &lt;/p&gt;
&lt;div class="answers"&gt;&lt;input id="dobavljanje_informacija_correct" name="dobavljanje_informacija_correct" type="hidden" value="ujiskelfer"/&gt;&lt;input id="ejnarinoprepus" name="dobavljanje_informacija" type="radio" value="superponiranje"/&gt;&lt;label for="ejnarinoprepus"&gt;superponiranje&lt;/label&gt;&lt;br/&gt;
&lt;input id="ejnaricnatsni" name="dobavljanje_informacija" type="radio" value="instanciranje"/&gt;&lt;label for="ejnaricnatsni"&gt;instanciranje&lt;/label&gt;&lt;br/&gt;
&lt;input id="ujiskelfer" name="dobavljanje_informacija" type="radio" value="refleksiju"/&gt;&lt;label for="ujiskelfer"&gt;refleksiju&lt;/label&gt;&lt;br/&gt;
&lt;input id="ejnavotkelfer" name="dobavljanje_informacija" type="radio" value="reflektovanje"/&gt;&lt;label for="ejnavotkelfer"&gt;reflektovanje&lt;/label&gt;&lt;br/&gt;
&lt;/div&gt;
&lt;button class="ok" data-correct="dobavljanje_informacija_correct" data-question="dobavljanje_informacija" onclick="checkAnswer(this, 'Bravo!', 'Hmmm... no.')" type="button"&gt;OK&lt;/button&gt;&lt;/div&gt;
&lt;h2 id="sta-sve-omogucava-refleksija"&gt;Šta sve omogućava refleksija?&lt;/h2&gt;
&lt;p&gt;Već je rečeno da refleksija u Javi omogućava da se dinamički, odnosno tokom izvršavanja programa ispitaju osobine tipova i modifikuju njihovi članovi. Najznačajniji poslovi koji se mogu obaviti korišćenjem refleksije su: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rukovanje klasama i kreiranje novih objekata &lt;/li&gt;
&lt;li&gt;rukovanje poljima &lt;/li&gt;
&lt;li&gt;rukovanje konstruktorima &lt;/li&gt;
&lt;li&gt;rukovanje metodama i njihovo pozivanje &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;U nastavku će upravo nabrojane intervencije biti ilustrovane na primeru klase &lt;code&gt;Product&lt;/code&gt;, sa kojom smo se već susretali: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Prvi korak u iskorišćavanju mogućnosti refleksije u Javi jeste dolazak do reference na objekat koji se u svetu refleksije koristi da predstavi klase i interfejse. Reč je o klasi &lt;code&gt;Class&lt;/code&gt;. Do objekta ove klase može se doći na sledeće načine: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;korišćenjem odrednice &lt;code&gt;class&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;korišćenjem metode &lt;code&gt;getClass()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;korišćenjem metode &lt;code&gt;forName()&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ukoliko poznajemo naziv tipa čije osobine želimo da ispitamo, moguće je iskoristiti odrednicu &lt;code&gt;class&lt;/code&gt;: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Ovo je najjednostavniji način kako bi se došlo do objekta koji u svetu refleksije predstavlja neku klasu. Do objekta klase &lt;code&gt;Class&lt;/code&gt; došli smo korišćenjem odrednice &lt;code&gt;class&lt;/code&gt;, koja je iskorišćena nad nazivom tipa. Naime, Java virtuelna mašina automatski kreira objekte koji reprezentuju sve tipove koji postoje tokom izvršavanja programa. Na nama je samo da im pristupimo, baš kao u primeru. &lt;/p&gt;
&lt;p&gt;Upravo prikazani pristup moguće je koristiti kada znamo naziv nekog tipa. Ukoliko naziv nekog tipa ne znamo, ali posedujemo njegov objekat, moguće je upotrebiti sledeći pristup: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; product1.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sada je prvo kreiran objekat klase &lt;code&gt;Product&lt;/code&gt;, a zatim je nad tako kreiranim objektom upotrebljena metoda &lt;code&gt;getClass()&lt;/code&gt; kako bi se došlo do objekta klase &lt;code&gt;Class&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Do objekta klase &lt;code&gt;Class&lt;/code&gt; moguće je doći na još jedan način, koji podrazumeva definisanje naziva klase u tekstualnom obliku: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Class.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;forName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Product"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Za dobijanje objekta klase &lt;code&gt;Class&lt;/code&gt; iskorišćena je njena statička metoda &lt;code&gt;forName()&lt;/code&gt;. Inače, klasa &lt;code&gt;Class&lt;/code&gt; ne poseduje javno dostupan konstruktor i nije je moguće naslediti. Metodi &lt;code&gt;forName()&lt;/code&gt; prosleđuje se pun kvalifikovan naziv klase (&lt;em&gt;fully-qualified class name&lt;/em&gt;). &lt;/p&gt;
&lt;p&gt;U prikazanom primeru, klasa &lt;code&gt;Product&lt;/code&gt; se nalazi unutar podrazumevanog paketa, te je stoga dovoljno navesti samo naziv klase. Ukoliko je potrebno dobiti referencu na neku klasu koja se ne nalazi u podrazumevanom paketu, navode se i nazivi svih paketa unutar kojih se klasa nalazi: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class stringClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Class.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;forName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"java.lang.String"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Nakon dolaska do reference na objekat klase &lt;code&gt;Class&lt;/code&gt; moguće je dobiti neke osnovne informacije o klasi. Metode za dobijanje nekih najznačajnijih informacija prikazane su tabelom 5.1. &lt;/p&gt;
&lt;figure&gt;
&lt;div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metoda&lt;/th&gt;
&lt;th&gt;Opis&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getName()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vraća pun naziv klase, uključujući i nazive svih paketa u kojima se klasa nalazi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getSimpleName()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vraća uprošćen naziv klase, odnosno naziv bez paketa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getModifiers()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vraća numeričku vrednost koja određuje modifikatore koji su upotrebljeni prilikom deklarisanja klase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getPackage()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vraća objekat tipa &lt;code&gt;Package&lt;/code&gt; koji predstavlja paket unutar koga se klasa nalazi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getSuperclass()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vraća objekat klase &lt;code&gt;Class&lt;/code&gt; koji predstavlja roditeljsku klasu&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;figcaption&gt;Tabela 5.1. Metode za dobijanje informacije o Java tipovima&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Upravo prikazane metode se mogu upotrebiti na sledeći način: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program1.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.lang.reflect.*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) &lt;/span&gt;&lt;span style="color: #815ba4"&gt;throws&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ClassNotFoundException {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Class stringClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		String className &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; stringClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		String simpleClassName &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; stringClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getSimpleName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; modifiers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; stringClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModifiers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Package classPackage &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; stringClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPackage&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Class superclass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; stringClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getSuperclass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(className);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(simpleClassName);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Is private: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Modifier.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;isPrivate&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(modifiers));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Is public: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Modifier.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;isPublic&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(modifiers));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Is final: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Modifier.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;isFinal&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(modifiers));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(classPackage.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(superclass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Prikazanim kodom obavljeno je ispitivanje ugrađene klase &lt;code&gt;String&lt;/code&gt;. Na izlazu se dobija sledeći ispis: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Rezultat primera iznad&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java.lang.String
String
Is private: &lt;span style="color: #c7c7c7"&gt;false&lt;/span&gt;
Is public: &lt;span style="color: #c7c7c7"&gt;true&lt;/span&gt;
Is final: &lt;span style="color: #c7c7c7"&gt;true&lt;/span&gt;
java.lang
java.lang.Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Korišćenje svih prikazanih metoda vrlo je jednostavno. Jedina metoda za koju je potrebno dodatno pojašnjenje jeste metoda &lt;code&gt;getModifiers()&lt;/code&gt;. Ona vraća vrednost &lt;code&gt;int&lt;/code&gt; tipa, koja nije namenjena za krajnje korišćenje. Naime, tako dobijenu vrednost je neophodno proslediti nekoj od metoda klase &lt;code&gt;Modifier&lt;/code&gt;, kako bi se utvrdilo njeno finalno značenje. Stoga su u primeru upotrebljene metode &lt;code&gt;isPrivate()&lt;/code&gt;, &lt;code&gt;isPublic()&lt;/code&gt; i &lt;code&gt;isFinal()&lt;/code&gt; kako bi se utvrdilo da li je klasa &lt;code&gt;String&lt;/code&gt; privatna, javna ili finalna, respektivno. &lt;/p&gt;
&lt;h2 id="rukovanje-konstruktorima"&gt;Rukovanje konstruktorima&lt;/h2&gt;
&lt;p&gt;Nakon dobijanja reference na objekat klase &lt;code&gt;Class&lt;/code&gt; kojim se neki tip predstavlja u svetu refleksije, moguće je doći do svih članova koji postoje unutar neke klase. Za početak će biti prikazano kako se mogu dobiti informacije o konstruktorima: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Constructor&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; constructors &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getConstructors&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Constructor constructor : constructors) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(constructor.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getParameterCount&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod ilustruje kompletan primer za dobijanje reference na konstruktore naše &lt;code&gt;Product&lt;/code&gt; klase. Bitno je da primetite da se u svetu refleksije konstruktor predstavlja klasom &lt;code&gt;Constructor&lt;/code&gt;. Referenca na sve konstruktore jedne klase dobija se pozivanjem metode &lt;code&gt;getConstructors()&lt;/code&gt;. U primeru je, nakon dobijanja reference na sve konstruktore, obavljen prolazak kroz niz konstruktora i na izlazu je ispisan broj parametara koji svaki konstruktor poseduje. S obzirom na to da naša klasa &lt;code&gt;Product&lt;/code&gt; poseduje tri konstruktora, na izlazu će biti ispisano sledeće: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;
&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;
&lt;span style="color: #f99b15"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Na sličan način je moguće dobiti i razne druge informacije o konstruktorima neke klase. Da bismo, na primer, dobili tipove ulaznih parametara konstruktora, dovoljno je napisati: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Constructor&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; constructors &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getConstructors&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Constructor constructor : constructors) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(constructor.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getParameterTypes&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;()));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na ovaj način se na izlazu dobija sledeće: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;class java.lang.String, class java.lang.String&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;class java.lang.String, class java.lang.String, double&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;U okviru radnog okruženja možete testirati i predhodne primere iz odeljka Rukovanje konstruktorima. &lt;/p&gt;
&lt;h2 id="instanciranje-klasa-koriscenjem-refleksije"&gt;Instanciranje klasa korišćenjem refleksije&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Constructor&lt;/code&gt; klasa koju smo koristili u prethodnim redovima može se iskoristiti i za instanciranje neke klase koja se ispituje korišćenjem refleksije: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;try&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	Constructor constructor &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getConstructor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	Product product &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Product) constructor.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;catch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (NoSuchMethodException &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;|&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; IllegalAccessException &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;|&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; InstantiationException &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;|&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; InvocationTargetException e) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	e.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;printStackTrace&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;U prikazanom primeru, prvo se dolazi do objekta klase &lt;code&gt;Class&lt;/code&gt; kao i do sada. Takvim objektom se predstavlja klasa &lt;code&gt;Product&lt;/code&gt;. Zatim je unutar &lt;code&gt;try&lt;/code&gt; bloka napisan kod kojim se dolazi do reference na konstruktor sa tri parametra. Tako u prikazanom primeru možete videti još jedan način za dolazak do reference na konstruktore klase, ovoga puta pojedinačno, na osnovu tipova ulaznih parametara. Za dolazak do reference na konkretan konstruktor koristi se metoda &lt;code&gt;getConstructor()&lt;/code&gt;, kojoj se prosleđuju reference na objekte kojima se predstavljaju tipovi ulaznih parametara. &lt;/p&gt;
&lt;p&gt;Instanciranje neke klase korišćenjem refleksije obavlja se pozivanjem metode &lt;code&gt;newInstance()&lt;/code&gt; nad referencom koja pokazuje na jedan konstruktor. Pri tom se metodi &lt;code&gt;newInstance()&lt;/code&gt; prosleđuju vrednosti ulaznih parametara. &lt;/p&gt;
&lt;p&gt;Metode &lt;code&gt;getConstructor()&lt;/code&gt; i &lt;code&gt;newInstance()&lt;/code&gt; mogu da proizvedu nekoliko različitih izuzetaka, ukoliko traženi konstruktor ne postoji ili kada se ne proslede parametri odgovarajućeg tipa. Upravo zbog toga je u primeru kompletan kod smešten unutar &lt;code&gt;try&lt;/code&gt; bloka, dok se u &lt;code&gt;catch&lt;/code&gt; bloku obrađuje nekoliko izuzetaka različitih tipova. &lt;/p&gt;
&lt;p&gt;U okviru radnog okruženja možete testirati i predhodni primer iz ovog odeljka - Instanciranje klasa korišćenjem refleksije. &lt;/p&gt;
&lt;h2 id="rukovanje-poljima"&gt;Rukovanje poljima&lt;/h2&gt;
&lt;p&gt;Pristup poljima jedne klase moguće je obaviti korišćenjem metode &lt;code&gt;getDeclaredFields()&lt;/code&gt;, baš kao u primeru koji sledi: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program2.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.lang.reflect.*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Field&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; fields &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;  productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getDeclaredFields&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Field field : fields) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Metoda &lt;code&gt;getDeclaredFields()&lt;/code&gt; omogućava dobijanje reference na sva polja koja se nalaze unutar neke klase, bez obzira na identifikator pristupa koji postoji na polju. Stoga prikazani kod u našem primeru proizvodi sledeći ispis: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brand
model
price
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Kada je potrebno dobiti referencu samo na polja koja su javna, moguće je koristiti metodu &lt;code&gt;getFields()&lt;/code&gt;. U našem primeru, ona će kao svoju povratnu vrednost emitovati prazan niz, s obzirom na to da unutar klase &lt;code&gt;Product&lt;/code&gt; ne postoje javna polja. &lt;/p&gt;
&lt;p&gt;Ukoliko želimo da dobijemo samo jedno polje iz neke klase, moguće je iskoristiti metodu &lt;code&gt;getField()&lt;/code&gt;, kojoj je potrebno proslediti naziv polja: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;try&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	Field field1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getField&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"brand"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;catch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (NoSuchFieldException e) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	e.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;printStackTrace&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;S obzirom na to da se može dogoditi da traženo polje ne postoji, metodu &lt;code&gt;getField()&lt;/code&gt; je uvek neophodno pozivati unutar &lt;code&gt;try&lt;/code&gt; bloka, baš kao u primeru iznad. &lt;/p&gt;
&lt;p&gt;Sve upravo prikazane metode emituju jedan ili više objekata tipa &lt;code&gt;Field&lt;/code&gt;. Drugim rečima, &lt;code&gt;Field&lt;/code&gt; je klasa kojom se reprezentuju polja klase. &lt;/p&gt;
&lt;p&gt;U okviru radnog okruženja možete testirati i ove primere. &lt;/p&gt;
&lt;h2 id="citanje-i-promena-vrednosti-svojstava"&gt;Čitanje i promena vrednosti svojstava&lt;/h2&gt;
&lt;p&gt;Kada se dođe do reference na neko od svojstava klase, korišćenjem refleksije je moguće čitati ili menjati njihove vrednosti. Sledeći primer će ilustrovati pristup za čitanje naziva svojstava i njihovih imena iz jednog objekta: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Field&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; fields &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;  productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getDeclaredFields&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Field field : fields) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;try&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setAccessible&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;": "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;get&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;catch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (IllegalAccessException e) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		e.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;printStackTrace&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Primer ilustruje pristup za čitanje svih svojstava jednog objekta, uključujući njihove nazive i vrednosti. U primeru smo prvo došli do referenci na sva svojstva unutar klase &lt;code&gt;Product&lt;/code&gt;, a zatim je unutar jedne &lt;code&gt;for&lt;/code&gt; petlje obavljen ispis naziva svojstava i njihovih vrednosti unutar objekta čija je referenca smeštena unutar promenljive &lt;code&gt;product1&lt;/code&gt;. Kao rezultat se na kraju dobija: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brand: Logitech
model: F710
price: &lt;span style="color: #f99b15"&gt;129&lt;/span&gt;.99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Iz primera se može zaključiti da se čitanje vrednosti nekog svojstva korišćenjem refleksije obavlja korišćenjem metode &lt;code&gt;get()&lt;/code&gt;, koja se poziva nad objektom &lt;code&gt;Field&lt;/code&gt; klase. Njoj se prosleđuje referenca na konkretan objekat čije vrednosti svojstava želimo da pročitamo. &lt;/p&gt;
&lt;p&gt;Metoda &lt;code&gt;get()&lt;/code&gt; klase &lt;code&gt;Field&lt;/code&gt; omogućava čitanje vrednosti samo onih svojstava kojima je iz tekućeg konteksta moguće pristupiti. Upravo zbog toga je u primeru pre korišćenja metode &lt;code&gt;get()&lt;/code&gt; iskorišćena još jedna metoda - &lt;code&gt;setAccessible()&lt;/code&gt;. Kada se ovoj metodi prosledi vrednost &lt;code&gt;true&lt;/code&gt;, omogućava se pristup čak i privatnim poljima, kojima se inače ne može pristupiti. &lt;/p&gt;
&lt;p&gt;Za izmenu vrednosti svojstava nekog objekta koristi se metoda &lt;code&gt;set()&lt;/code&gt;. Evo kako može izgledati jedan primer postavljanja vrednosti svojstava korišćenjem refleksije: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Field&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; fields &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getDeclaredFields&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Field field : fields) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setAccessible&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getType&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;().&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"brand"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;set&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;else&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;().&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"model"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;set&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;else&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getType&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		field.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;set&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na početku primera obavlja se kreiranje jednog &lt;code&gt;Product&lt;/code&gt; objekta, korišćenjem konstruktora bez parametara. Na taj način se dobija objekat koji ima podrazumevane vrednosti svojstava koja nisu eksplicitno postavljena. Zatim se, kao i u prethodnim primerima, prolazi kroz niz svojstava klase &lt;code&gt;Product&lt;/code&gt;. Kroz niz dobijenih svojstava se prolazi jednom &lt;code&gt;for&lt;/code&gt; petljom. Svakom svojstvu se omogućava pristup pozivanjem metode &lt;code&gt;setAccessible()&lt;/code&gt; kojoj se prosleđuje vrednost &lt;code&gt;true&lt;/code&gt;. Nakon toga je napravljena jedna uslovna konstrukcija u kojoj se prvo utvrđuje tip svojstva. Ukoliko je svojstvo tipa &lt;code&gt;String&lt;/code&gt;, proverava se njegov naziv, zato što klasa &lt;code&gt;Product&lt;/code&gt; poseduje dva &lt;code&gt;String&lt;/code&gt; svojstva. &lt;br/&gt;
&lt;strong&gt;Napomena &lt;br/&gt;
Upravo prikazani primer podrazumeva da je &lt;code&gt;main()&lt;/code&gt; metoda obeležena &lt;code&gt;throws IllegalAccessException&lt;/code&gt; oznakom, kako bi se izbeglo definisanje blokova za obradu eventualnih izuzetaka i primer učinio jednostavnijim.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;U okviru radnog okruženja možete testirati i predhodne primere iz ovog odeljka - Čitanje i promena vrednosti svojstava. &lt;/p&gt;
&lt;h2 id="rukovanje-metodama"&gt;Rukovanje metodama&lt;/h2&gt;
&lt;p&gt;U svetu refleksije, metode se predstavljaju korišćenjem klase &lt;code&gt;Method&lt;/code&gt;. Evo kako se može doći do svih metoda koje se nalaze unutar naše klase &lt;code&gt;Product&lt;/code&gt;: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"', price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program3.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.lang.reflect.*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program3&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Method&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; methods &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMethods&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Method method : methods) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Prikazanim kodom dolazi se do svih metoda klase &lt;code&gt;Product&lt;/code&gt;, korišćenjem metode &lt;code&gt;getMethods()&lt;/code&gt;. Zatim se unutar jedne &lt;code&gt;for&lt;/code&gt; petlje ispisuje naziv svake metode. Ispis koji se dobija nakon izvršavanja prikazanog koda je sledeći: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;toString
getModel
setPrice
getBrand
getPrice
setModel
setBrand
&lt;span style="color: #c7c7c7"&gt;wait&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;wait&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;wait&lt;/span&gt;
equals
hashCode
getClass
notify
notifyAll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;U ovom trenutku se možete zapitati odakle ovoliki broj metoda unutar naše klase &lt;code&gt;Product&lt;/code&gt;. Ukoliko se sećate priče o nasleđivanju, neće biti teško da zaključite odakle dolazi određeni broj metoda čiji su nazivi ispisani. Tako su npr. &lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt;, &lt;code&gt;getClass()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt; i &lt;code&gt;notifyAll()&lt;/code&gt; metode koje je klasa &lt;code&gt;Product&lt;/code&gt; nasledila iz klase &lt;code&gt;Object&lt;/code&gt;. Preostale metode su one koje su deklarisane direktno unutar klase &lt;code&gt;Product&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Ukoliko je potrebno doći samo do metoda koje su deklarisane unutar &lt;code&gt;Product&lt;/code&gt; klase, umesto metode &lt;code&gt;getMethods()&lt;/code&gt; koristi se metoda &lt;code&gt;getDeclaredMethods()&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Method&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; methods &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getDeclaredMethods&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Method method : methods) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Primer je identičan prethodnom. Jedina razlika je u upotrebi metode &lt;code&gt;getDeclaredMethods()&lt;/code&gt;. Stoga se na izlazu dobijaju samo metode klase &lt;code&gt;Product&lt;/code&gt;: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;toString
getBrand
setBrand
setModel
getModel
setPrice
getPrice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Referenca na pojedinačnu metodu se može dobiti na sledeći način: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Method method &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"toString"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Na ovaj način se dobija referenca na metodu po nazivu - &lt;code&gt;toString()&lt;/code&gt;. Metoda &lt;code&gt;toString()&lt;/code&gt; je bez parametara, a ukoliko je potrebno dobiti referencu koja prihvata neki ulazni parametar koristi se sledeći pristup: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Method method &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"setBrand"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;U okviru radnog okruženja možete testirati i ostale primere iz ovog odeljka - Rukovanje metodama. &lt;/p&gt;
&lt;h2 id="pozivanje-metoda"&gt;Pozivanje metoda&lt;/h2&gt;
&lt;p&gt;Kada se dobije referenca na neku metodu, refleksija omogućava da se takva metoda i pozove. Prvo će biti prikazano kako se poziva metoda &lt;code&gt;toString()&lt;/code&gt;, odnosno metoda bez ulaznih parametara: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Method method &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"toString"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;String returnValue &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (String) method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;invoke&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(returnValue);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;U primeru je prvo obavljeno kreiranje novog objekta &lt;code&gt;Product&lt;/code&gt; klase. Takav objekat u nastavku služi kako bi se nad njim obavio poziv metode korišćenjem refleksije. Prvo se dolazi do reference na metodu sa nazivom &lt;code&gt;toString()&lt;/code&gt;, a zatim se korišćenjem metode &lt;code&gt;invoke()&lt;/code&gt; takva metoda i poziva. Prilikom pozivanja njoj se prosleđuje objekat, s obzirom na to da je metoda &lt;code&gt;toString()&lt;/code&gt; objektni član. Povratna vrednost metode &lt;code&gt;toString()&lt;/code&gt; hvata se unutar jedne &lt;code&gt;String&lt;/code&gt; promenljive i na kraju ispisuje i na izlazu. &lt;br/&gt;
&lt;strong&gt;Napomena &lt;br/&gt;
Metode &lt;code&gt;getMethod()&lt;/code&gt; i &lt;code&gt;invoke()&lt;/code&gt; mogu da stvore nekoliko različitih izuzetaka - NoSuchMethodException, &lt;code&gt;SecurityException&lt;/code&gt;, &lt;code&gt;InvocationTargetException&lt;/code&gt;, &lt;code&gt;IllegalAccessException&lt;/code&gt;. Njih je neophodno obraditi korišćenjem &lt;code&gt;try&lt;/code&gt; i &lt;code&gt;catch&lt;/code&gt; blokova ili unutar potpisa metode dodati &lt;code&gt;throws&lt;/code&gt; oznaku i nakon nje spomenute izuzetke.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Pozivanje metode koja poseduje ulazni parametar može da izgleda ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Class productClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Method method &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; productClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"setBrand"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;invoke&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"HP"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Primer je vrlo sličan prethodnom. Unutar njega dolazi se do reference na metodu &lt;code&gt;setBrand()&lt;/code&gt;. To je jedna od &lt;code&gt;set&lt;/code&gt; metoda, odnosno metoda za postavljanje vrednosti privatnih polja. Upravo zbog toga, ona prihvata jedan ulazni parametar &lt;code&gt;String&lt;/code&gt; tipa. To je i razlog zbog koga se metodi &lt;code&gt;invoke()&lt;/code&gt; ovoga puta, pored reference na objekat, prosleđuje i vrednost ulaznog parametra. Da je na ovaj način vrednost svojstva &lt;code&gt;make&lt;/code&gt; zaista i promenjena dokazuje poslednja naredba u primeru, koja na izlaz ispisuje sledeće: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #ef6155"&gt;Brand&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #48b685"&gt;'HP'&lt;/span&gt;, &lt;span style="color: #ef6155"&gt;Model&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #48b685"&gt;'F710'&lt;/span&gt;, &lt;span style="color: #ef6155"&gt;Price&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #f99b15"&gt;129&lt;/span&gt;.99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;U okviru radnog okruženja možete testirati i primere iz ovog odeljka - Pozivanje metoda. &lt;/p&gt;
&lt;h2 id="vezba"&gt;Vežba&lt;/h2&gt;
&lt;p&gt;Data je sledeća klasa: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Practice1.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Practice1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sayHelloWorld&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(){&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello World"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sayHello&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name){&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Potrebno je napisati kod koji će korišćenjem refleksije da ispita osobine klase &lt;code&gt;Practice1&lt;/code&gt;. Metode unutar klase &lt;code&gt;Practice1&lt;/code&gt; je potrebno pozvati i ispisati njihove povratne vrednosti. &lt;/p&gt;
&lt;h3 id="resenje"&gt;Rešenje&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;Practice1_Answer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.lang.reflect.InvocationTargetException&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.lang.reflect.Method&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.lang.reflect.Parameter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Practice1_Answer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) &lt;/span&gt;&lt;span style="color: #815ba4"&gt;throws&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; InvocationTargetException, IllegalAccessException, ClassNotFoundException {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Class c &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Class.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;forName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Practice1"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Practice1 myClass &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Practice1();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		String stringArgument &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"John"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Method&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; methods &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; c.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getDeclaredMethods&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Method method : methods) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Invoking of method: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getParameterCount&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				Parameter&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; param &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getParameters&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (param.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;					&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (param&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getType&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;class&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;						method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;invoke&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(myClass, stringArgument);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;					}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;else&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				method.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;invoke&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(myClass);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="refleksija"></category></entry><entry><title>AJP 1.4. Događaji</title><link href="https://vlajna95.github.io/articles/ajp-14-dogadaji" rel="alternate"></link><published>2022-04-22T19:24:00+02:00</published><updated>2022-04-22T19:24:00+02:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-04-22:/articles/ajp-14-dogadaji</id><summary type="html">&lt;p&gt;Događaji u programskom jeziku Java&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Do sada smo se susretali sa objektima koji unutar sebe poseduju svojstva i metode. Svojstva i metode su osnovni mehanizmi pomoću kojih se rukuje objektima. Pri tome, svojstvima se izlažu podaci, a metodama operacije. Ipak, veoma često se može javiti potreba da objekti budu u mogućnosti da spoljašnjem okruženju signaliziraju određena dešavanja do kojih može doći unutar njih. Tako dolazimo do pojma događaja, koji su veoma važan aspekt programiranja. Pojmu događaja biće posvećena lekcija pred vama. &lt;/p&gt;
&lt;h2 id="sta-su-dogaaji"&gt;Šta su događaji?&lt;/h2&gt;
&lt;p&gt;Događaji omogućavaju da objekti spoljašnjem svetu pošalju neku vrstu signala, odnosno da obaveste sve zainteresovane subjekte o određenom dešavanju. Analogija se može napraviti sa različitim situacijama iz svakodnevnog života. Jedna takva situacija poznata je svim vozačima. Unutar rezervoara automobila nalazi se senzor koji prati nivo goriva. Onoga trenutka kada se nivo goriva spusti ispod određene vrednosti, na kontrolnoj tabli se aktivira indikator rezerve goriva. To je svojevrstan primer događaja. Kada takvog sistema izveštavanja ne bi bilo, mi bismo morali da samostalno vodimo računa o nivou napunjenosti rezervoara, što je svakako rešenje koje je daleko manje komforno. &lt;br/&gt;
Događaji u programiranju funkcionišu po identičnom principu. Oni omogućavaju objektima da, baš kao i indikator rezerve goriva, spoljašnjem okruženju signaliziraju neke pojave koje su značajne za njihovo unutrašnje funkcionisanje. &lt;/p&gt;
&lt;p&gt;Programiranje koje podrazumeva praćenje i obradu događaja u toku izvršavanja aplikacije naziva se programiranje zasnovano na događajima (&lt;em&gt;event-based programming&lt;/em&gt;). Događaji su posebno važan pojam u aplikacijama koje sadrže grafičko korisničko okruženje i različite kontrole koje korisnik upotrebljava kako bi upravljao programom (tastere, prozore, polja za unos vrednosti...). Ipak, to ne znači da je korišćenje događaja ograničeno na aplikacije sa grafičkim elementima. Događaji nisu striktno vezani za grafička okruženja, pa svoju primenu imaju i prilikom razvoja konzolnih aplikacija, što ćete imati prilike da vidite i u nastavku ove lekcije u kojoj će biti ilustrovan osnovni koncept rada sa događajima. &lt;/p&gt;
&lt;h2 id="kako-funkcionisu-dogaaji"&gt;Kako funkcionišu događaji?&lt;/h2&gt;
&lt;p&gt;Rukovanje događajima u programiranju podrazumeva postojanje nekoliko činilaca. Svi oni su ilustrovani slikom 4.1. &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 4.1. Različiti elementi koji učestvuju u životu jednog događaja" src="/images/AdvancedJavaProgramming/1_04_01.png"/&gt;
&lt;figcaption&gt;Slika 4.1. Različiti elementi koji učestvuju u životu jednog događaja&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Na slici 4.1. možete videti da rad sa događajima podrazumeva postojanje sledećih elemenata: &lt;br/&gt;
    - &lt;strong&gt;izvor događaja&lt;/strong&gt; (&lt;em&gt;event source&lt;/em&gt;) - objekat ili klasa, odnosno generator koji proizvodi događaj &lt;br/&gt;
    - &lt;strong&gt;objekat događaja&lt;/strong&gt; (&lt;em&gt;event object&lt;/em&gt;) - objekat koji reprezentuje događaj, odnosno objekat koji sadrži informacije o događaju do koga je došlo &lt;br/&gt;
    - &lt;strong&gt;slušalac&lt;/strong&gt;, odnosno &lt;strong&gt;slušaoci događaja&lt;/strong&gt; (&lt;em&gt;event listener(s)&lt;/em&gt;) - objekat, odnosno objekti koji će biti obavešteni kada do nekog događaja dođe; proces kojim neki objekat postaje slušalac često se naziva &lt;strong&gt;pretplata na događaj&lt;/strong&gt;, a sami slušaoci &lt;strong&gt;pretplatnici&lt;/strong&gt; (&lt;em&gt;subscribers&lt;/em&gt;) &lt;/p&gt;
&lt;p&gt;U nastavku ove lekcije biće prikazano kako samostalno kreirati i emitovati jedan događaj. Takav događaj će zatim biti obrađen od strane nekoliko slušalaca događaja, što praktično znači da će oni dobiti dojavu o njegovom nastanku. &lt;/p&gt;
&lt;p&gt;Primer koji će biti prikazan u nastavku simuliraće alarm na budilniku. Stoga ćemo kreirati  klasu &lt;code&gt;Alarm&lt;/code&gt;, čiji objekti će imati mogućnost da generišu jedan događaj. Događaj će se aktivirati nakon proticanja proizvoljne količine vremena, što je podatak koji će objekti klase &lt;code&gt;Alarm&lt;/code&gt; moći da dobiju kao parametar. Na kraju, klasa &lt;code&gt;Alarm&lt;/code&gt; će posedovati i logiku za registrovanje svih objekata koje je potrebno obavestiti o pojavi događaja. &lt;/p&gt;
&lt;h2 id="kreiranje-klase-dogaaja"&gt;Kreiranje klase događaja&lt;/h2&gt;
&lt;p&gt;U prethodnim redovima ste mogli da pročitate da se događaji u programu predstavljaju korišćenjem objekata događaja. Objekat događaja je ono što generator događaja prosleđuje svim slušaocima. Kako bismo bili u mogućnosti da kreiramo objekat događaja, potrebna nam je klasa čijim instanciranjem će biti stvoren takav objekat. &lt;br/&gt;
Osnovna klasa kojom se u Java programskom jeziku predstavljaju događaji jeste klasa &lt;code&gt;EventObject&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.EventObject&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;AlarmEvent&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; EventObject {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na ovaj način kreirana je klasa &lt;code&gt;AlarmEvent&lt;/code&gt; koja će u našem programu da predstavlja događaj aktiviranja alarma na budilniku. Ova klasa nasleđuje upravo spomenutu klasu &lt;code&gt;EventObject&lt;/code&gt;. Reč je o konkretnoj klasi koja poseduje samo jedan konstruktor sa jednim parametrom. Parametar se odnosi na referencu na objekat koji je izazvao događaj. Sve to praktično znači da smo nasleđivanjem klase &lt;code&gt;EventObject&lt;/code&gt; mi u obavezi da samostalno definišemo konstruktor koji će da pozove konstruktor roditeljske klase i da mu prosledi referencu na objekat koji je generator događaja. Naravno, kao i uvek prilikom nasleđivanja, imamo mogućnost da objekat događaja proširimo, odnosno da definišemo još neke osobine događaja. To ćemo i učiniti, uvođenjem još jednog svojstva, koje će predstavljati poruku događaja: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.EventObject&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;AlarmEvent&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; EventObject {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	String message;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;AlarmEvent&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Object source, String message) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(source);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;message&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; message;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="question"&gt;
&lt;p&gt;Objekat kojim se predstavlja događaj kreira se na osnovu klase: &lt;/p&gt;
&lt;div class="answers"&gt;&lt;input id="klasa_objekta_za_event_correct" name="klasa_objekta_za_event_correct" type="hidden" value="tcejbotneve"/&gt;&lt;input id="ssalctneve" name="klasa_objekta_za_event" type="radio" value="EventClass"/&gt;&lt;label for="ssalctneve"&gt;EventClass&lt;/label&gt;&lt;br/&gt;
&lt;input id="tneve" name="klasa_objekta_za_event" type="radio" value="Event"/&gt;&lt;label for="tneve"&gt;Event&lt;/label&gt;&lt;br/&gt;
&lt;input id="tcejbotneve" name="klasa_objekta_za_event" type="radio" value="EventObject"/&gt;&lt;label for="tcejbotneve"&gt;EventObject&lt;/label&gt;&lt;br/&gt;
&lt;input id="noitcatneve" name="klasa_objekta_za_event" type="radio" value="EventAction"/&gt;&lt;label for="noitcatneve"&gt;EventAction&lt;/label&gt;&lt;br/&gt;
&lt;/div&gt;
&lt;button class="ok" data-correct="klasa_objekta_za_event_correct" data-question="klasa_objekta_za_event" onclick="checkAnswer(this, 'Bravo!', 'Hmmm... no.')" type="button"&gt;OK&lt;/button&gt;&lt;/div&gt;
&lt;h2 id="kreiranje-interfejsa-za-predstavljanje-slusalaca"&gt;Kreiranje interfejsa za predstavljanje slušalaca&lt;/h2&gt;
&lt;p&gt;Sledeći korak u procesu kreiranja primera upotrebe događaja biće kreiranje interfejsa kojim će biti predstavljeni slušaoci. Naime, želimo da obezbedimo da naš događaj aktiviranja alarma može da dobije objekat bilo koje klase, odnosno želimo da omogućimo objektima svih tipova da budu slušaoci našeg događaja. Ipak, kao što ćete uskoro videti, klasa koja će generisati događaj mora na neki način rukovati svim pretplatnicima. Kako se ne bismo ograničavali na neki konkretan tip, za predstavljanje svih slušalaca ćemo iskoristiti apstrakciju, oličenu u jednom interfejsu: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;AlarmListener&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;alarmRang&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(AlarmEvent event);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je interfejs koji će morati da implementiraju svi konkretni tipovi koji žele da dobijaju dojavu o aktiviranju alarma budilnika. Tako smo na ovaj način efikasno predstavili sve slušaoce korišćenjem apstraktnog tipa koji je predstavljen interfejsom. &lt;/p&gt;
&lt;p&gt;Bitno je da primetite i to da se unutar interfejsa nalazi i jedna metoda. Iz prethodnih lekcija znamo da je ovako definisana metoda javna i apstraktna, stoga će sve konkretne klase morati da je implementiraju. Reč je o metodi koja će se unutar slušalaca aktivirati kada dođe do pojave događaja. &lt;/p&gt;
&lt;h2 id="kreiranje-generatora-dogaaja"&gt;Kreiranje generatora događaja&lt;/h2&gt;
&lt;p&gt;Element koji nedostaje jeste klasa unutar koje će doći do emitovanja događaja. Nju smo spomenuli na početku ove lekcije - reč je o klasi sa nazivom &lt;code&gt;Alarm&lt;/code&gt;. Klasa &lt;code&gt;Alarm&lt;/code&gt; će omogućiti aktiviranje alarma na budilniku nakon isticanja određene količine vremena. &lt;/p&gt;
&lt;p&gt;Pored funkcionalnosti koja će omogućiti aktiviranje alarma, unutar klase &lt;code&gt;Alarm&lt;/code&gt; je neophodno da postoji i logika koja će omogućiti rukovanje svim pretplatnicima. Stoga je kreiranje klase koja će generisati događaj korak u kome se objedinjuju svi elementi koje smo do sada kreirali. &lt;/p&gt;
&lt;p&gt;Klasa koja generiše događaj unutar sebe mora imati referencu na sve pretplatnike. Takođe, dobra je praksa da se unutar generatora događaja obezbedi i logika za ukidanje nekih objekata iz liste pretplatnika. Sve to praktično znači da unutar klase Alarm moramo da kreiramo i dve metode koje će se koristiti za dodavanje i uklanjanje slušalaca događaja. S obzirom na to da slušalaca može biti više, njihove reference moramo čuvati unutar niza: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Timer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.TimerTask&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Alarm&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; listeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addListener&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(AlarmListener alarmListener) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newListeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		newListeners&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; alarmListener;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		listeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeListener&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(AlarmListener alarmListener) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;++&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;){&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (alarmListener.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newListeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, indexOfElementToRemove);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners, indexOfElementToRemove&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newListeners, indexOfElementToRemove, listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;indexOfElementToRemove&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		listeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setTimeFromNow&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; millis) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Timer timer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Timer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Timer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		timer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;schedule&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; TimerTask() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;run&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"AlarmEvent triggered..."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (AlarmListener listener : listeners) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;					AlarmEvent eventObj &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmEvent(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Time is up!"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;					listener.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;alarmRang&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(eventObj);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exit&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}, millis);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod predstavlja kompletnu logiku klase &lt;code&gt;Alarm&lt;/code&gt;. Ona se zapravo sastoji iz jednog niza i tri metode: &lt;br/&gt;
    - &lt;code&gt;AlarmListener[] listeners&lt;/code&gt; - niz unutar koga će biti smeštani slušaoci &lt;br/&gt;
    - &lt;code&gt;void addListener(AlarmListener alarmListener)&lt;/code&gt; - metoda za registrovanje slušaoca &lt;br/&gt;
    - &lt;code&gt;void removeListener(AlarmListener alarmListener)&lt;/code&gt; - metoda za uklanjanje slušaoca &lt;br/&gt;
    - &lt;code&gt;void setTimeFromNow(int millis)&lt;/code&gt; - metoda za aktiviranje alarma &lt;/p&gt;
&lt;p&gt;S obzirom na to da nizovi u Javi moraju imati fiksnu, unapred utvrđenu dužinu, unutar metoda &lt;code&gt;addListener()&lt;/code&gt; i &lt;code&gt;removeListener()&lt;/code&gt; postavljena je logika koja prilikom svakog dodavanja ili uklanjanja slušaoca kreira novi niz koji na kraju dodeljuje objektnom svojstvu &lt;code&gt;listeners&lt;/code&gt;. Tako ovo svojstvo na kraju uvek poseduje niz čija je dužina tačno onolika koliko ima i registrovanih slušalaca. Kada se dodaje novi slušalac, prvo se kreira novi niz sa jednim elementom više u odnosu na postojeći niz. Postojeći niz se kopira u novi niz, a zatim se na kraj dodaje još jedan, novi slušalac. &lt;br/&gt;
Uklanjanje slušaoca se obavlja po sličnom principu. Prvo se kreira novi niz, čija je dužina za jedan element manja od dužine postojećeg niza. Zatim se utvrđuje na kom indeksu se nalazi element koji je potrebno ukloniti. Na kraju se u novi niz kopiraju svi elementi iz starog, osim elementa koji se uklanja. Kopiranje se obavlja iz dva dela, tako što se prvo kopiraju svi elementi pre elementa koji se uklanja, a zatim i svi elementi koji se nalaze nakon elementa koji se uklanja. &lt;/p&gt;
&lt;p&gt;Metoda &lt;code&gt;setTimeFromNow()&lt;/code&gt; koristi se za aktiviranje logike klase &lt;code&gt;Alarm&lt;/code&gt;. To je metoda koja će aktivirati alarm nakon vremena u milisekundama koje se ovoj metodi prosledi kao parametar. Kao pomoć za formiranje takve logike iskorišćene su klase &lt;code&gt;Timer&lt;/code&gt; i &lt;code&gt;TimerTask&lt;/code&gt;, o kojima je bilo reči u jednoj od prethodnih lekcija. Kada istekne vreme koje je metodi &lt;code&gt;setTimeFromNow()&lt;/code&gt; prosleđeno kao ulazni parametar, aktivira se metoda &lt;code&gt;run()&lt;/code&gt; i unutar nje logika kojom se obavlja emitovanje događaja. &lt;/p&gt;
&lt;p&gt;Emitovanje događaja se zapravo sastoji iz prolaska kroz niz svih slušalaca i pozivanje metode &lt;code&gt;alarmRang()&lt;/code&gt;, čija implementacija se nalazi unutar njih. Metodi &lt;code&gt;alarmRang()&lt;/code&gt; se prosleđuje objekat događaja, sa osnovnim informacija o događaju (sa referencom na objekat koji je proizveo događaj i porukom). Tako svi slušaoci bivaju obavešteni o pojavi događaja. &lt;/p&gt;
&lt;h2 id="pretplata-na-dogaaje"&gt;Pretplata na događaje&lt;/h2&gt;
&lt;p&gt;U dosadašnjem toku ove lekcije realizovali smo sve elemente koji su neophodni za obradu događaja. Preostaje još da kreiramo slušaoce i da ih pretplatimo na dobijanje dojave o pojavi događaja. &lt;/p&gt;
&lt;p&gt;Događaj koji je predstavljen &lt;code&gt;AlarmEvent&lt;/code&gt; klasom mogu da slušaju svi objekti čija klasa implementira interfejs &lt;code&gt;AlarmListener&lt;/code&gt;. Možemo da napravimo i neku posebnu klasu, čiji će objekti biti slušaoci, ali isto tako, možemo da iskoristimo i glavnu klasu našeg Java programa kako bi primer ostao što jednostavniji: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// ...&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;alarmRang&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(AlarmEvent e) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;print&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(e.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;message&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;" Wake up!!!"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Klasa &lt;code&gt;Program&lt;/code&gt; je implementirala interfejs &lt;code&gt;AlarmListener&lt;/code&gt; i tako je postala legitiman tip slušaoca događaja &lt;code&gt;AlarmEvent&lt;/code&gt;. Implementiranje interfejsa &lt;code&gt;AlarmListener&lt;/code&gt; obavezuje klasu da poseduje i metodu &lt;code&gt;alarmRang()&lt;/code&gt;. To je metoda koja će se aktivirati kada dođe do pojave događaja. &lt;/p&gt;
&lt;p&gt;Preostaje još da unutar &lt;code&gt;main()&lt;/code&gt; metode dodamo i finalni kod kojim će biti kreirano nekoliko objekata-slušalaca. Oni će biti pretplaćeni na slušanje &lt;code&gt;AlarmEvent&lt;/code&gt; događaja. Na kraju će biti dodat i kod kojim će se aktivirati logika klase &lt;code&gt;Alarm&lt;/code&gt;, koja će nakon nekog vremena da proizvede &lt;code&gt;AlarmEvent&lt;/code&gt; događaj: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Alarm.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Alarm.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Timer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.TimerTask&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Alarm&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; listeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addListener&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(AlarmListener alarmListener) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newListeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		newListeners&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; alarmListener;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		listeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeListener&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(AlarmListener alarmListener) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;++&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;){&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (alarmListener.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmListener&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newListeners, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, indexOfElementToRemove);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(listeners, indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newListeners, indexOfElementToRemove, listeners.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;indexOfElementToRemove&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		listeners &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newListeners;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setTimeFromNow&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; millis) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Timer timer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Timer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Timer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		timer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;schedule&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; TimerTask() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;run&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"AlarmEvent triggered..."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (AlarmListener listener : listeners) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;					AlarmEvent eventObj &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; AlarmEvent(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Time is up!"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;					listener.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;alarmRang&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(eventObj);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exit&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}, millis);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;AlarmEvent.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// AlarmEvent.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.EventObject&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;AlarmEvent&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; EventObject {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	String message;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;AlarmEvent&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Object source, String message) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(source);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;message&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; message;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;AlarmListener.java&lt;/summary&gt;
&lt;p&gt;{.java title="// AlarmListener.java"}&lt;br/&gt;
public interface AlarmListener {&lt;br/&gt;
    void alarmRang(AlarmEvent event);&lt;br/&gt;
}&lt;br/&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;p&gt;{.java title="// Program.java"}&lt;br/&gt;
public class Program implements AlarmListener {&lt;br/&gt;
    public static void main(String[] args) {&lt;br/&gt;
        Program program = new Program();&lt;br/&gt;
        Program program1 = new Program();&lt;br/&gt;
        Program program2 = new Program();&lt;br/&gt;
        Alarm alarm = new Alarm();&lt;br/&gt;
        alarm.addListener(program);&lt;br/&gt;
        alarm.addListener(program1);&lt;br/&gt;
        alarm.addListener(program2);&lt;br/&gt;
        alarm.setTimeFromNow(2000);&lt;br/&gt;
    }&lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;@Override
public void alarmRang(AlarmEvent e) {
    System.out.print(e.message);
    System.out.println(" Wake up!!!");
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;br/&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;Unutar &lt;code&gt;main()&lt;/code&gt; metode prvo je obavljeno kreiranje tri objekta klase &lt;code&gt;Program&lt;/code&gt;. Zatim je kreiran objekat klase &lt;code&gt;Alarm&lt;/code&gt;. Njemu su dodati slušaoci, prosleđivanjem kreiranih objekata metodi &lt;code&gt;addListener()&lt;/code&gt;. Poslednjom naredbom, unutar &lt;code&gt;main()&lt;/code&gt; metode aktiviran je alarm budilnika. S obzirom na to da je prosleđena vrednost 2000, alarm će se aktivirati nakon dve sekunde. Aktiviranje alarma značiće i emitovanje &lt;code&gt;AlarmEvent&lt;/code&gt; događaja. Sve će to na kraju, nakon dve sekunde, unutar konzole da proizvede sledeći rezultat: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AlarmEvent triggered...
Time is up! Wake up!!!
Time is up! Wake up!!!
Time is up! Wake up!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prva poruka potiče iz klase &lt;code&gt;Alarm&lt;/code&gt; i metode &lt;code&gt;run()&lt;/code&gt; koja se aktivira nakon isteka prosleđene količine vremena. Ona se aktivira jednom, a unutar nje, kao što ste nešto ranije mogli da vidite, obavlja se obaveštavanje svih slušalaca događaja. Njih je u primeru tri i upravo zbog toga se na izlazu dobijaju tri identične poruke &lt;code&gt;Time is up! Wake up!!!&lt;/code&gt;. Ovo praktično znači da se metoda &lt;code&gt;alarmRang()&lt;/code&gt; aktivirala tri puta, odnosno nad svakim od objekata-slušalaca po jednom. Pri tome je bitno da primetite da je tekst &lt;code&gt;Time is up!&lt;/code&gt; došao zajedno sa samim objektom događaja, unutar njegovog svojstva &lt;code&gt;message&lt;/code&gt;. Takvom tekstu je zatim unutar metode za obradu događaja dodat nastavak &lt;code&gt;Wake up!!!&lt;/code&gt;. &lt;/p&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="događaji"></category></entry><entry><title>AJP 1.3. Klase unutar klasa</title><link href="https://vlajna95.github.io/articles/ajp-13-klase-unutar-klasa" rel="alternate"></link><published>2022-04-22T18:46:00+02:00</published><updated>2022-04-22T18:46:00+02:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-04-22:/articles/ajp-13-klase-unutar-klasa</id><summary type="html">&lt;p&gt;Klase unutar klasa u programskom jeziku Java&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Klase se u Javi smeštaju unutar zasebnih fajlova čiji naziv mora biti identičan nazivu klase. Tako su sve klase koje smo do sada kreirali bile smeštane unutar zasebnih fajlova. Pored toga, unutar klasa, kao njihovi članovi, mogu se naći svojstva i metode. U ovoj lekciji ćete videti da klase, pored svojstava i metoda, mogu da sadrže i druge klase, što omogućava kreiranje klasa unutar klasa, odnosno postojanje većeg broja klasa unutar jednog fajla. Takođe, u ovoj lekciji ćete imati prilike da vidite da je klase moguće definisati i unutar metoda, a na kraju i to da Java omogućava i kreiranje klasa bez imena. Za početak, biće ilustrovan pojam klasa unutar klasa.&lt;/p&gt;
&lt;h2 id="klase-unutar-klasa"&gt;Klase unutar klasa&lt;/h2&gt;
&lt;p&gt;U programskom jeziku Java moguće je napraviti klasu koja se nalazi u okviru neke druge klase. Klase unutar klasa se drugačije nazivaju ugnežđene klase (&lt;em&gt;nested classes&lt;/em&gt; ili &lt;em&gt;inner classes&lt;/em&gt;). Evo kako može izgledati jedan primer takve klase: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;OuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;NestedClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prikazani primer ilustruje dve klase. Klasa OuterClass je glavna, odnosno spoljašnja klasa, unutar koje se kao član nalazi još jedna klasa – NestedClass. OuterClass se drugačije naziva klasa najvišeg nivoa (&lt;em&gt;top level class&lt;/em&gt;), a NestedClass se drugačije naziva unutrašnja, odnosno ugnežđena klasa. &lt;/p&gt;
&lt;h3 id="zbog-cega-su-nam-potrebne-klase-unutar-klasa"&gt;Zbog čega su nam potrebne klase unutar klasa?&lt;/h3&gt;
&lt;p&gt;Postoje brojni scenariji u kojima je korisno koristiti ovakav pristup, koji omogućava smeštanje jedne klase unutar neke druge. Tri najjača aduta postojanja klasa unutar klasa su: &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Grupisanje&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Smeštanje većeg broja klasa unutar jedne top-level klase naročito je korisno kada je potrebno obaviti logičko grupisanje klasa koje će biti korišćene samo na jednom mestu. Drugim rečima, ukoliko znamo da će određena klasa biti korišćena samo u okviru jedne klase, logično je nju ugraditi u takvu klasu, čime spoljašnja i unutrašnja klasa postaju jedna celina.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Enkapsulacija&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Definisanje jedne klase kao člana neke druge klase može poboljšati enkapsuliranost koda. Naime, s obzirom na to da je ugnežđena klasa član klase u kojoj se nalazi, nad njom je moguće definisati različite modifikatore pristupa, a sve u zavisnosti od cilja koji je potrebno postići.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Čitljivost&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Na kraju, klase unutar klasa mogu pozitivno da utiču na čitljivost koda, pošto se one nalaze blizu mesta u kodu na kome će biti korišćene. &lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="vrste-ugnezenih-klasa"&gt;Vrste ugnežđenih klasa&lt;/h2&gt;
&lt;p&gt;Za početak će biti reči o dve vrste klasa koje mogu biti direktni klasni ili objektni članovi. U zavisnosti od toga da li je ugnežđena klasa objektni ili klasni član, razlikuju se dve vrste takvih klasa: &lt;br/&gt;
    - nestatičke ugnežđene klase &lt;br/&gt;
    - statičke ugnežđene klase &lt;/p&gt;
&lt;p&gt;Pored ove dve vrste ugnežđenih klasa, koje su direktni objektni ili klasni članovi, postoje i klase koje se mogu definisati unutar blokova koda, najčešće unutar metoda. Takve klase će biti predmet drugog dela ove lekcije. &lt;/p&gt;
&lt;h3 id="nestaticke-ugnezene-klase"&gt;Nestatičke ugnežđene klase&lt;/h3&gt;
&lt;p&gt;Prva vrsta unutrašnjih klasa sa kojima ćemo se upoznati jesu klase koje su unutar svoje roditeljske klase još jedan objektni član. Reč je o klasama koje nisu statičke (već znamo da statički elementi pripadaju klasama, a oni koji nisu statički isključivo objektima koji se kreiraju korišćenjem takve klase). Takva je bila i unutrašnja klasa iz uvodnog primera u ovoj lekciji. &lt;/p&gt;
&lt;p&gt;Nestatičke ugnežđene klase predstavljaju nestatički član klase u kojoj se nalaze, baš kao bilo koje drugo polje ili metoda koji nisu označeni ključnom rečju &lt;code&gt;static&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;OuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;m&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(i);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;InnerClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;accessOuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			m();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;U prikazanom primeru definisana je jedna top-level klasa sa nazivom &lt;code&gt;OuterClass&lt;/code&gt;, koja sadrži dva privatna člana: &lt;br/&gt;
    - jedno polje sa nazivom &lt;code&gt;i&lt;/code&gt; &lt;br/&gt;
    - jednu metodu sa nazivom &lt;code&gt;m&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Zatim je kreirana nestatička ugnežđena klasa sa nazivom &lt;code&gt;InnerClass&lt;/code&gt; i u okviru nje metoda sa nazivom &lt;code&gt;accessOuterClass&lt;/code&gt;. Svrha ove metode je demonstracija mogućnosti unutrašnjih klasa da pristupe članovima klase u kojoj se nalaze, pa čak i ako su oni označeni kao privatni. &lt;/p&gt;
&lt;p&gt;Ugnežđene nestatičke klase moguće je instancirati samo pomoću objekata klase u kojoj se nalaze. To praktično znači da se &lt;code&gt;InnerClass&lt;/code&gt; može instancirati isključivo ukoliko se prethodno kreira objekat klase &lt;code&gt;OuterClass&lt;/code&gt;: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;OuterClass.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// OuterClass.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;OuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;m&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(i);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;InnerClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;accessOuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			m();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		OuterClass outerObject &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; OuterClass();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		OuterClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;InnerClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; innerObject &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; outerObject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;InnerClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		innerObject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;accessOuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Instanciranje nestatičkih ugnežđenih klasa se vrlo retko obavlja na ovaj način, odnosno izvan matične klase unutar koje su takve klase definisane. Jednostavno, nestatičke ugnežđene klase su gotovo uvek namenjene za korišćenje unutar samih klasa u kojima su i kreirane. &lt;/p&gt;
&lt;h3 id="staticke-ugnezene-klase"&gt;Statičke ugnežđene klase&lt;/h3&gt;
&lt;p&gt;Ugnežđene klase mogu biti i klasni članovi, odnosno, one se mogu deklarisati i kao statički elementi matične klase, tj. klase u kojoj se nalaze. U takvoj situaciji govorimo o statičkim ugnežđenim klasama: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;OuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; outerClassField;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;StaticNestedClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jedina razlika u odnosu na prethodni primer jeste korišćenje ključne reči &lt;code&gt;static&lt;/code&gt; prilikom deklarisanja klase. Stoga za ovakvu ugnežđenu klasu važi sve što i za ostale statičke elemente - oni postoje samo u domenu klase i moguće im je pristupiti korišćenjem imena matične klase, bez njenog prethodnog instanciranja: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;OuterClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;StaticNestedClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; obj &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; OuterClass.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;StaticNestedClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sada možete videti da se, za razliku od prethodnog primera, ugnežđene statičke klase mogu instancirati bez prethodnog instanciranja matične klase. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Iz statičkih ugnežđenih klasa ne može se pristupiti objektnim članovima matične klase.&lt;/strong&gt; &lt;br/&gt;
Statičke ugnežđene klase nemaju pristup članovima objekata svoje matične klase. Upravo zbog toga unutar kreirane klase (&lt;code&gt;OuterClass&lt;/code&gt;) i postoji jedno objektno polje. Ukoliko bismo njemu pokušali da pristupimo iz ugnežđene statičke klase, dobili bismo grešku kao na slici 3.1. &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 3.1. Primer nemogućnosti pristupa objektnom članu iz statičke ugnežđene klase" src="/images/AdvancedJavaProgramming/1_03_01.png"/&gt;
&lt;figcaption&gt;Slika 3.1. Primer nemogućnosti pristupa objektnom članu iz statičke ugnežđene klase&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ponašanje koje vidite na slici 3.1. nije nikakvo iznenađenje. Naime, iz bilo kog statičkog konteksta nije moguće pristupiti nijednom objektnom elementu. Jednostavno, statički elementi se kreiraju prilikom pokretanja aplikacije, a objektni tek prilikom instanciranja određene klase, za svaki objekat zasebno. S obzirom na to da je reč o dva potpuno različita konteksta, statičkim elementima nije omogućen pristup objektnim. Po identičnom principu, ni unutar &lt;code&gt;main()&lt;/code&gt; metode, koja je takođe statička, nije moguće pristupiti objektnim poljima i metodama glavne klase Java programa. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Samo unutrašnje klase mogu biti statičke&lt;/strong&gt; &lt;br/&gt;
Jedina situacija u kojoj jedna klasa može biti statička jeste ukoliko je ona deo neke druge klase, odnosno ukoliko je reč o ugnežđenoj klasi. Drugim rečima, top-level klase ne mogu biti statičke, zato što statički mogu biti samo elementi klasa. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kada koristiti statičke, a kada nestatičke unutrašnje klase?&lt;/strong&gt; &lt;br/&gt;
Do sada su prikazane dve vrste ugnežđenih klasa: one koje pripadaju direktno klasi (statičke) i one koje pripadaju instancama klase u kojoj se nalaze. Nestatičke ugnežđene klase je bolje koristiti kada je iz ugnežđene klase potrebno pristupati objektnim poljima i metodama. Kada tako nešto nije neophodno, ugnežđena klasa može biti statička. &lt;/p&gt;
&lt;div class="question"&gt;
&lt;p&gt;Koji tip ugnežđenih klasa ne može pristupiti članovima klasa u okviru koje je ugnežđena klasa definisana? &lt;/p&gt;
&lt;div class="answers"&gt;&lt;input id="klase_bez_pristupa_clanovima_correct" name="klase_bez_pristupa_clanovima_correct" type="hidden" value="ekčitats"/&gt;&lt;input id="entavirp" name="klase_bez_pristupa_clanovima" type="radio" value="privatne"/&gt;&lt;label for="entavirp"&gt;privatne&lt;/label&gt;&lt;br/&gt;
&lt;input id="encnatsni" name="klase_bez_pristupa_clanovima" type="radio" value="instancne"/&gt;&lt;label for="encnatsni"&gt;instancne&lt;/label&gt;&lt;br/&gt;
&lt;input id="ekčitats" name="klase_bez_pristupa_clanovima" type="radio" value="statičke"/&gt;&lt;label for="ekčitats"&gt;statičke&lt;/label&gt;&lt;br/&gt;
&lt;input id="ekčitatsen_eneđžengu" name="klase_bez_pristupa_clanovima" type="radio" value="ugnežđene nestatičke"/&gt;&lt;label for="ekčitatsen_eneđžengu"&gt;ugnežđene nestatičke&lt;/label&gt;&lt;br/&gt;
&lt;/div&gt;
&lt;button class="ok" data-correct="klase_bez_pristupa_clanovima_correct" data-question="klase_bez_pristupa_clanovima" onclick="checkAnswer(this, 'Bravo!', 'Hmmm... no.')" type="button"&gt;OK&lt;/button&gt;&lt;/div&gt;
&lt;h3 id="lokalne-klase"&gt;Lokalne klase&lt;/h3&gt;
&lt;p&gt;Ugnežđene klase mogu se javiti i unutar blokova. Opet je analogiju potrebno napraviti sa klasičnim promenljivama koje se deklarišu unutar blokova. Promenljiva unutar bloka naziva se lokalna promenljiva, pa se onda po identičnom principu i klase unutar bloka nazivaju lokalne klase. &lt;br/&gt;
Najčešće se lokalne klase mogu sresti unutar metoda: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;OuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;testMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;LocalClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;LocalClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				b &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		LocalClass lc &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; LocalClass();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(lc.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(lc.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prikazani kod ilustruje primer lokalne klase. U okviru klase &lt;code&gt;OuterClass&lt;/code&gt; postoji metoda sa nazivom &lt;code&gt;testMethod&lt;/code&gt;. Ova metoda prihvata jedan ulazni parametar imenovan nazivom &lt;code&gt;x&lt;/code&gt;. Unutar metode se formira vrednost lokalne promenljive &lt;code&gt;y&lt;/code&gt;, a zatim se obavlja i kreiranje jedne lokalne klase sa nazivom &lt;code&gt;LocalClass&lt;/code&gt;. &lt;br/&gt;
&lt;code&gt;LocalClass&lt;/code&gt; poseduje dva svojstva, a unutar konstruktora se postavljaju njihove vrednosti korišćenjem lokalnih promenljivih &lt;code&gt;x&lt;/code&gt; i &lt;code&gt;y&lt;/code&gt;. Nakon ovoga, unutar &lt;code&gt;testMethod()&lt;/code&gt; metode instancira se lokalna klasa i ispisuju se vrednosti objektnih svojstava &lt;code&gt;a&lt;/code&gt; i &lt;code&gt;b&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Kako bi se primer testirao, dovoljno je instancirati klasu &lt;code&gt;OuterClass&lt;/code&gt; i pozvati metodu &lt;code&gt;testMethod()&lt;/code&gt;: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;OuterClass.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// OuterClass.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;OuterClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;testMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;LocalClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;LocalClass&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				b &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		LocalClass lc &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; LocalClass();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(lc.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(lc.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		OuterClass obj &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; OuterClass();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		obj.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;testMethod&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;10&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3 id="anonimne-klase"&gt;Anonimne klase&lt;/h3&gt;
&lt;p&gt;Svakako najznačajnija vrsta ugnežđenih klasa o kojima će biti reči u ovoj lekciji jesu klase koje se nazivaju anonimne. Reč je o klasama koje omogućavaju da se klasa deklariše i instancira odjednom i sve to u formi izraza. Tako nešto može zvučati zbunjujuće, stoga ćemo se sa pojmom anonimnih klasa upoznati na jednom realnom primeru: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Timer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.TimerTask&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Program started..."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;MyTimerTask&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; TimerTask {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;run&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello World"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exit&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		MyTimerTask myTimerTask &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; MyTimerTask();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Timer timer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Timer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Timer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;long&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; delay &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5000L&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		timer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;schedule&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(myTimerTask, delay);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je primer Java programa koji na izlazu odmah nakon pokretanja ispisuje poruku &lt;code&gt;Program started...&lt;/code&gt;, a nakon pet sekundi i poruku &lt;code&gt;Hello World&lt;/code&gt;. Tako nešto je postignuto korišćenjem jedne ugrađene klase &lt;code&gt;Timer&lt;/code&gt; i njene metode &lt;code&gt;schedule()&lt;/code&gt;. Ova metoda prihvata dva parametra: &lt;br/&gt;
    - objekat klase &lt;code&gt;TimerTask&lt;/code&gt; &lt;br/&gt;
    - numeričku vrednost koja diktira nakon koliko milisekundi je potrebno izvršiti određeni kod &lt;/p&gt;
&lt;p&gt;Prvi parametar metode &lt;code&gt;schedule()&lt;/code&gt; posebno je interesantan za nas u ovom trenutku. Naime, on treba da bude objekat koji predstavlja instancu klase &lt;code&gt;TimerTask&lt;/code&gt;. Ipak, ovu klasu nije moguće direktno instancirati, zato što je reč o apstraktnoj klasi, odnosno klasi koja je predviđena samo kao osnova za kreiranje konkretnih klasa. Pored toga, klasa &lt;code&gt;TimerTask&lt;/code&gt; poseduje i jednu apstraktnu metodu koja se zove &lt;code&gt;run()&lt;/code&gt;. Pošto je reč o apstraktnoj metodi, ona se mora implementirati prilikom nasleđivanja klase &lt;code&gt;TimerTask&lt;/code&gt;. Upravo zbog toga je u prikazanom primeru obavljeno kreiranje konkretne klase &lt;code&gt;MyTimerTask&lt;/code&gt;. Ona je nasledila klasu &lt;code&gt;TimerTask&lt;/code&gt; i obezbedila implementaciju metode &lt;code&gt;run()&lt;/code&gt;. Inače, metoda &lt;code&gt;run()&lt;/code&gt; je upravo ona metoda koja će se aktivirati nakon definisanog vremena, posredstvom metode &lt;code&gt;schedule()&lt;/code&gt; klase &lt;code&gt;Timer&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Nije teško uvideti da smo mi u primeru morali da obavimo dosta toga kako bismo uposlili metodu &lt;code&gt;schedule()&lt;/code&gt;. Njeno pozivanje nas je nateralo da kreiramo sopstvenu klasu, da je zatim instanciramo i da tako dobijeni objekat na kraju prosledimo metodi &lt;code&gt;schedule()&lt;/code&gt;. Sve to smo obavili korišćenjem pojma lokalnih klasa, o kojima je bilo reči u prethodnom segmentu. S obzirom na to da smo klasu &lt;code&gt;MyTimerTask&lt;/code&gt; definisali unutar &lt;code&gt;main()&lt;/code&gt; metode, reč je o lokalnoj klasi. Ipak, sve ovo se mnogo jednostavnije i elegantnije može obaviti korišćenjem anonimnih klasa: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Timer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.TimerTask&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Program started..."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		TimerTask myTimerTask &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; TimerTask() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;run&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello World"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exit&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Timer timer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Timer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Timer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;long&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; delay &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5000L&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		timer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;schedule&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(myTimerTask, delay);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sada je bitno da primetite da u primeru više nema klase &lt;code&gt;MyTimerTask&lt;/code&gt; koja je postojala u prethodnom primeru. Njena deklaracija je zamenjena jednim izrazom u kome je iskorišćen koncept anonimnih klasa. Reč je o izrazu kojim promenljiva &lt;code&gt;myTimerTask&lt;/code&gt; dobija referencu na objekat tipa &lt;code&gt;TimerTask&lt;/code&gt;. Možete da vidite da se u takvom izrazu pojavljuje nešto sa čim se do sada nismo susretali. Reč je o instanciranju klase, koje nakon uobičajene logike za instanciranje sadrži i telo unutar vitičastih zagrada. U pitanju je upravo sintaksa za kreiranje anonimnih klasa: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt;&lt;span style="color: #ef6155"&gt;-&lt;/span&gt;&lt;span style="color: #fec418"&gt;or&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt;&lt;span style="color: #ef6155"&gt;-&lt;/span&gt;&lt;span style="color: #fec418"&gt;name&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() { &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt;&lt;span style="color: #ef6155"&gt;-&lt;/span&gt;&lt;span style="color: #fec418"&gt;body&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovakva sintaksa nam omogućava da u jednoj naredbi obavimo nekoliko operacija: &lt;br/&gt;
    - da kreiramo novu klasu bez imena, zbog čega se ona i zove anonimna klasa &lt;br/&gt;
    - da takva anonimna klasa nasledi neku drugu klasu ili implementira određeni interfejs &lt;br/&gt;
    - da se obavi instanciranje upravo kreirane anonimne klase &lt;br/&gt;
    - da se referenca na dobijeni objekat anonimne klase spakuje unutar promenljive koja se nalazi na levoj strani izraza &lt;/p&gt;
&lt;p&gt;Kao što možete da vidite, procesom kreiranja anonimnih klasa u potpunosti se zaobilazi korak ručnog kreiranja konkretne klase. Pošto je reč o klasama koje nemaju ime, njih je moguće upotrebiti samo jednokratno, odnosno isključivo unutar izraza u kome promenljiva dobija vrednost. Izvan takvog izraza, anonimna klasa iz ovog primera ne postoji. Stoga su anonimne klase odlična jezička mogućnost u situacijama kao u prikazanom primeru, odnosno onda kada nema potrebe da eksplicitno kreiramo klasu samo kako bismo implementirali jednu metodu. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anonimni objekti&lt;/strong&gt; &lt;br/&gt;
Upravo prikazani primer je moguće i dodatno optimizovati. Naime, u priču je moguće uključiti i pojam anonimnih objekata, pa kod može postati još kompaktniji: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Timer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.TimerTask&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Program started..."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Timer timer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Timer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Timer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		timer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;schedule&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; TimerTask() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;run&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello World"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exit&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5000L&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sada je bitno da primetite da više nema naredbe u kojoj je obavljano dodeljivanje vrednosti promenljivoj &lt;code&gt;myTimerTask&lt;/code&gt;. Štaviše, takve promenljive u kodu, praktično, više uopšte nema. Ipak, ukoliko želimo da budemo u potpunosti precizni, ona postoji, ali sada nije imenovana, zato što se objekat kreira baš na onom mestu na kome se i koristi - prilikom pozivanja metode &lt;code&gt;schedule()&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="lambda-izrazi"&gt;Lambda izrazi&lt;/h2&gt;
&lt;p&gt;Kada govorimo o anonimnim klasama u Java jeziku, nije moguće zaobići ni pojam lambda izraza. Reč je o jednoj lestvici iznad na skali apstraktnih rešenja koja postoje unutar jezika. To praktično znači da je za razumevanje lambda izraza prvo neophodno razumeti pojam anonimnih klasa. Stoga ćemo se i mi u nastavku sa lambda izrazima upoznati na jednom primeru koji će ilustrovati transformiranje jednog izraza sa anonimnom klasom u lambda izraz. Primer će ilustrovati filtriranje jednog niza celobrojnih vrednosti, korišćenjem ugrađenog skupa funkcionalnosti. Početni niz će izgledati ovako: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;8&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;9&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;78&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;69&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Želimo da u nastavku obavimo filtriranje ovog niza tako da dobijemo novi niz koji sadrži samo pozitivne vrednosti koje postoje unutar početnog niza. To ćemo obaviti korišćenjem funkcionalnosti koje postoje unutar Java platforme. Reč je o metodi &lt;code&gt;filter()&lt;/code&gt; koja poseduje sledeći potpis: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;IntStream &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;filter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(IntPredicate predicate);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; metoda postoji unutar &lt;code&gt;Stream&lt;/code&gt; skupa funkcionalnosti, a kao svoj ulazni parametar prihvata podatak tipa &lt;code&gt;IntPredicate&lt;/code&gt;. Reč je zapravo o interfejsu koji klasa mora implementirati kako bi njeni objekti mogli da se proslede metodi &lt;code&gt;filter()&lt;/code&gt;. Stoga, osnovni oblik primera filtriranja može da izgleda ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Arrays&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.function.IntPredicate&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;8&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;9&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;78&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;69&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;MyPredicate&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; IntPredicate {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;test&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		MyPredicate myPredicate &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; MyPredicate();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;stream&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;filter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(myPredicate).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toArray&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je primer koji je realizovan korišćenjem najbazičnijeg pristupa, koji ne podrazumeva upotrebu ni anonimnih klasa ni lambda izraza. Obavljeno je kreiranje nove lokalne klase sa nazivom &lt;code&gt;MyPredicate&lt;/code&gt;. Ona je implementirala interfejs &lt;code&gt;IntPredicate&lt;/code&gt;, a zbog toga i metodu &lt;code&gt;test()&lt;/code&gt; koja je unutar takvog interfejsa definisana. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metoda &lt;code&gt;test()&lt;/code&gt; &lt;code&gt;IntPredicate&lt;/code&gt; interfejsa&lt;/strong&gt; &lt;br/&gt;
Metoda &lt;code&gt;test()&lt;/code&gt; je inače metoda koja se u procesu filtriranja poziva nad svakim članom jednog niza. U zavisnosti od povratne vrednosti utvrđuje se da li će vrednost biti prisutna unutar finalnog niza ili ne. Metoda &lt;code&gt;test()&lt;/code&gt; kao ulazni parametar dobija svaku od vrednosti niza pojedinačno. Ukoliko &lt;code&gt;test()&lt;/code&gt; metoda kao svoju povratnu vrednosti vrati &lt;code&gt;true&lt;/code&gt;, član će biti uvršćen u finalni niz. Ukoliko povratna vrednost bude &lt;code&gt;false&lt;/code&gt;, to je signal da vrednost neće biti član finalnog niza. &lt;/p&gt;
&lt;p&gt;U prikazanom primeru logika metode &lt;code&gt;test()&lt;/code&gt; je formulisana tako da proverava da li je prosleđena vrednost veća od nule. Ukoliko jeste, povratna vrednost metode će biti &lt;code&gt;true&lt;/code&gt; i obrnuto. Na taj način će bilo koja pozitivna ulazna vrednost da proizvede &lt;code&gt;true&lt;/code&gt; vrednost na izlazu, čime se postiže filtriranje niza o kojem smo govorili nešto ranije. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Funkcionalni interfejsi&lt;/strong&gt; &lt;br/&gt;
Svaki interfejs koji u Java jeziku poseduje samo jednu apstraktnu metodu naziva se funkcionalni interfejs. Upravo takav je i interfejs &lt;code&gt;IntPredicate&lt;/code&gt; koji je naša klasa implementirala u prikazanom primeru. &lt;/p&gt;
&lt;p&gt;Nakon kreiranja klase &lt;code&gt;MyPredicate&lt;/code&gt; koja implementira potrebni interfejs obavljeno je njeno instanciranje. Dobijeni objekat je prosleđen metodi &lt;code&gt;filter()&lt;/code&gt;. U primeru je bitno da primetite da se metoda &lt;code&gt;filter()&lt;/code&gt; ne poziva direktno nad nizom, već da se on prvo pretvara u tok korišćenjem klase &lt;code&gt;Arrays&lt;/code&gt; i njene metode &lt;code&gt;stream()&lt;/code&gt;. Tokovi će biti detaljno obrađeni u jednoj od narednih lekcija ovog kursa. &lt;/p&gt;
&lt;p&gt;Na kraju, kada se ovakav primer pokrene, na izlazu se dobija: &lt;br/&gt;
&lt;code&gt;[13, 8, 15, 5, 69]&lt;/code&gt; &lt;br/&gt;
Na osnovu izlaza možemo da zaključimo da je filtriranje uspešno obavljeno, jer na izlazu dobijamo samo pozitivne članove originalnog niza. &lt;/p&gt;
&lt;p&gt;Kao što je već rečeno, prikazani primer je postignut bez upotrebe anonimnih klasa i lambda izraza. Stoga će naš sledeći korak biti optimizacija prikazanog primera uključivanjem anonimnih klasa o kojima je bilo reči u prethodnom segmentu. Naime, vrlo je nepraktično kreirati potpuno novu klasu samo kako bi se implementirao jedan interfejs. Stoga se sve takve operacije mogu grupisati u izraz kojim se dobija jedan objekat anonimne klase: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Arrays&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.function.IntPredicate&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;8&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;9&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;78&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;69&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		IntPredicate myPredicate &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; IntPredicate() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;test&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;stream&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;filter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(myPredicate).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toArray&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tek nakon ove modifikacije, dolazimo i do pojma lambda izraza. Naime, prikazani primer je moguće još jednom optimizovati, upotrebom lambda izraza, koji omogućavaju da se prikazani kod drastično uprosti. Tako nešto signalizira i samo razvojno okruženje (slika 3.2). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 3.2. Savet razvojnog okruženja da se anonimna klasa zameni lambda izrazom" src="/images/AdvancedJavaProgramming/1_03_02.png"/&gt;
&lt;figcaption&gt;Slika 3.2. Savet razvojnog okruženja da se anonimna klasa zameni lambda izrazom&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ukoliko poslušamo razvojno okruženje i odaberemo opciju &lt;em&gt;Replace with lambda&lt;/em&gt;, koju možete videti unutar prozora sa porukom, dobijamo kod koji izgleda ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Arrays&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;8&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;9&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;78&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;69&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;stream&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;filter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toArray&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Možete videti da se kod kompletnog primera sveo na tri osnovne naredbe unutar &lt;code&gt;main()&lt;/code&gt; metode. Ona koja nas posebno interesuje jeste ono što se nalazi na mestu parametra metode &lt;code&gt;filter()&lt;/code&gt;: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Isečak naredbe koji upravo vidite jeste lambda izraz. Lambda izrazi predstavljaju najkompaktniju sintaksu za kreiranje i instanciranje anonimnih klasa koje treba da implementiraju funkcionalni interfejs. To praktično znači da je lambda izraze moguće koristiti uvek kada je potrebno dobiti objekat koji nastaje instanciranjem anonimne klase koja implementira interfejs sa jednom apstraktnom metodom. Drugim rečima, lambda izrazom se u pozadini obavlja sledeće: &lt;br/&gt;
    - kreira se anonimna klasa koja implementira funkcionalni interfejs &lt;br/&gt;
    - obavlja se instanciranje kreirane anonimne klase &lt;br/&gt;
Sve ovo se obavlja korišćenjem forme koja podseća na neku vrstu metode. &lt;/p&gt;
&lt;p&gt;Lambda izrazi se sastoje iz tri dela: &lt;br/&gt;
    - &lt;strong&gt;liste argumenata&lt;/strong&gt;, odnosno ulaznih parametara &lt;br/&gt;
    - &lt;strong&gt;tokena&lt;/strong&gt; (&lt;code&gt;-&amp;gt;&lt;/code&gt;), odnosno skupa karaktera koji se koriste za razdvajanje parametara i tela &lt;br/&gt;
    - &lt;strong&gt;tela&lt;/strong&gt;, odnosno logike koja predstavlja telo apstraktne metode koja se implementira &lt;/p&gt;
&lt;p&gt;Lako je zaključiti da je prilikom formiranja lambda izraza jedino bitno kako izgleda apstraktna metoda koju anonimna klasa implementira. Stoga je kod maksimalno uprošćen, odnosno, oslobođeni smo potrebe za definisanjem bilo koje propratne sintakse. Nije čak potrebno definisati ni tip interfejsa koji se implementira, pošto će on biti automatski detektovan u zavisnosti od ulaznog parametra metode. &lt;/p&gt;
&lt;p&gt;Sve ovo na kraju znači da lambda izraz koji smo kreirali u ovom primeru ima sledeće značenje: &lt;br/&gt;
    - &lt;code&gt;value&lt;/code&gt; - Naziv ulaznog parametra metode &lt;code&gt;test()&lt;/code&gt; koja se implementira &lt;br/&gt;
    - &lt;code&gt;-&amp;gt;&lt;/code&gt; - Token koji govori da je reč o lambda izrazu &lt;br/&gt;
    - &lt;code&gt;(value &amp;gt; 0)&lt;/code&gt; - Logika koja se nalazi unutar tela &lt;code&gt;test()&lt;/code&gt; metode koja se implementira &lt;/p&gt;
&lt;h3 id="reference-na-metode"&gt;Reference na metode&lt;/h3&gt;
&lt;p&gt;U prethodnim redovima ste mogli da pročitate da se lambda izrazi mogu koristiti uvek kada je potrebno dobiti objekat koji nastaje instanciranjem anonimne klase koja implementira interfejs sa jednom apstraktnom metodom. Drugim rečima, lambda izraze je moguće koristiti u kombinaciji sa funkcionalnim interfejsima, odnosno interfejsima koji poseduju samo jednu apstraktnu metodu. Ipak, ponekad se lambda izrazi koriste samo kako bi se obavio poziv neke druge metode koja treba da obavi neku logiku. Kako biste bolje razumeli na šta se misli, pogledajte sledeći primer: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.Arrays&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.util.function.IntConsumer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;JavaProgram&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;8&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;9&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;78&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;69&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;stream&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;forEach&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; IntConsumer() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;accept&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(value);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		});&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Primer podrazumeva korišćenje niza koji je već viđen u prethodnim primerima. Opet se pribegava pretvaranju niza u tok podataka, kako bismo nad takvim podacima mogli da pozovemo metodu &lt;code&gt;forEach()&lt;/code&gt;. Reč je o metodi koja omogućava da se određena logika obavi nad svakim elementom toka. Mi smo u primeru ovu metodu iskoristili kako bismo ispisali vrednost svakog elementa, pa je tako primer analogan prolasku kroz niz korišćenjem neke petlje. &lt;/p&gt;
&lt;p&gt;Za realizaciju prikazanog primera iskorišćena je anonimna klasa, kako bi se dobio objekat tipa &lt;code&gt;IntConsumer&lt;/code&gt; koji se mora proslediti metodi &lt;code&gt;forEach()&lt;/code&gt;. Poznajući pojam lambda izraza, primer sada možemo modifikovati na sledeći način: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; numbers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;8&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;9&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;78&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;69&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;stream&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;forEach&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(value &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(value));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tako može da izgleda identičan primer, ovoga puta realizovan korišćenjem lambda izraza. Anonimna klasa je zamenjena lambda izrazom i kod je postao znatno kompaktniji. &lt;/p&gt;
&lt;p&gt;Bitno je da primetite da se unutar tela lambda izraza nalazi samo poziv jedne metode. Reč je o metodi kojom se na izlazu ispisuje vrednost elementa. U ovakvoj situaciji, kada se telo lambda izraza sastoji samo iz poziva neke druge metode, lambda izraz je moguće pretvoriti u referencu na metodu. &lt;/p&gt;
&lt;p&gt;Referenca na metodu je najkompaktniji način za implementaciju funkcionalnog interfejsa kada se implementacija sastoji iz poziva neke druge metode. Evo kako se već prikazani primer može optimizovati još jednom, ovoga puta upotrebom reference na metodu: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Arrays.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;stream&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(numbers).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;forEach&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;::println);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Metodi &lt;code&gt;forEach()&lt;/code&gt; sada se prosleđuje referenca na metodu. Referenca na metodu se dobija navođenjem tipa unutar koga se metoda nalazi, nakon koga se koristi specijalna konstrukcija koja se sastoji iz dva karaktera dve tačke. Nakon dvostruke dve tačke, navodi se naziv metode čija se referenca prilaže. &lt;/p&gt;
&lt;p&gt;Bitno je primetiti još jednu osobinu referenci na metode, a ona se odnosi na odsustvo parametara. Jednostavno, prilikom definisanja reference na metodu ne prilažu se parametri, već prosleđivanje za nas obavlja sam kompajler. On u ovom slučaju ulazni parametar metode &lt;code&gt;accept()&lt;/code&gt; automatski prosleđuje metodi &lt;code&gt;println()&lt;/code&gt;. &lt;/p&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="klase"></category><category term="anonimne klase"></category><category term="anonimni objekti"></category><category term="lambda"></category><category term="referenciranje"></category></entry><entry><title>AJP 1.2. Apstraktne klase i interfejsi</title><link href="https://vlajna95.github.io/articles/ajp-12-apstraktne-klase-i-interfejsi" rel="alternate"></link><published>2022-01-10T19:31:00+01:00</published><updated>2022-01-10T19:31:00+01:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-01-10:/articles/ajp-12-apstraktne-klase-i-interfejsi</id><summary type="html">&lt;p&gt;Apstraktne klase i interfejsi u programskom jeziku Java&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Prethodna lekcija donela je kratak osvrt na osnovne postulate objektno orijentisanog programiranja u Javi. Prikazano je kako se obavlja kreiranje klasa i objekata, te kako se postiže nasleđivanje, redefinisanje i preklapanje metoda. Sve su to pojmovi čije je razumevanje neophodno za ono što će biti izneto u nastavku ovog modula. &lt;/p&gt;
&lt;p&gt;Sada je vreme da se posvetimo naprednim osobinama objektno orijentisanog programiranja u Javi. Za početak, pozabavićemo se specifičnim oblicima u kojima mogu postojati Java klase, pa će tako u ovoj lekciji biti reči o apstraktnim klasama. Nakon apstraktnih klasa, u ovoj lekciji biće predstavljen još jedan veoma značajan pojam objektno orijentisanog programiranja - interfejsi. &lt;/p&gt;
&lt;h2 id="apstraktne-klase"&gt;Apstraktne klase&lt;/h2&gt;
&lt;p&gt;Apstraktne klase omogućavaju da se kreira klasa koja se ne može instancirati. I sada se verovatno pitate – zbog čega bismo uopšte i kreirali klasu koja se ne može koristiti za kreiranje objekata? Naime, u nekim situacijama može se javiti potreba za kreiranjem klase koja bi se koristila samo kao obrazac za kreiranje nekih drugih klasa. Takva klasa bi služila kao osnova za sve klase koje bi iz nje bile izvedene. Tako su apstraktne klase one koje se ne mogu instancirati, već samo naslediti. &lt;br/&gt;
Primer iz prethodne lekcije idealan je za razumevanje pojma apstraktnih klasa. Naime, &lt;code&gt;Product&lt;/code&gt; klasa se može pretvoriti u apstraktnu klasu: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bitno je da primetite da smo prilikom definisanja klase &lt;code&gt;Product&lt;/code&gt; iskoristili ključnu reč &lt;code&gt;abstract&lt;/code&gt;. Ključna reč &lt;code&gt;abstract&lt;/code&gt; je ono što jednu klasu čini apstraktnom. Ovu ključnu reč je potrebno postaviti nakon ključne reči koja predstavlja modifikator pristupa, a pre ključne reči &lt;code&gt;class&lt;/code&gt; kojom se deklariše klasa. &lt;/p&gt;
&lt;p&gt;Nakon pretvaranja klase &lt;code&gt;Product&lt;/code&gt; u apstraktnu, nećete moći da primetite nikakvu razliku u funkcionisanju koda iz prethodne lekcije. Naime, instanciranje objekata nasleđenih klasa funkcionisaće bez ikakvih problema. &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Gamepad product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Printer product2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Printer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"HP"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Envy Photo 7155"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;179.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Monitor product3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Monitor(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Dell"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"U2419H"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;219.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;24&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product3);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Product.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #848484"&gt;// ...&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Gamepad.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Gamepad.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;wireless&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"wireless="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Monitor.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Monitor.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Monitor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Monitor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;diagonal&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"diagonal="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Printer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Printer.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Printer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Printer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;color&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"color="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Ipak, ukoliko pokušate da instancirate klasu &lt;code&gt;Product&lt;/code&gt;, koja je sada apstraktna, doći će do pojave greške (slika 2.1). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.1. Pokušaj instanciranja apstraktne klase proizvodi grešku" src="/images/AdvancedJavaProgramming/1_02_01.png"/&gt;
&lt;figcaption&gt;Slika 2.1. Pokušaj instanciranja apstraktne klase proizvodi grešku&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Na slici 2.1. se jasno može videti da razvojno okruženje ukazuje na grešku prilikom pokušaja instanciranja klase &lt;code&gt;Product&lt;/code&gt; koja je apstraktna. &lt;/p&gt;
&lt;p&gt;Apstraktne i konkretne klase &lt;br/&gt;
U prethodnim redovima ste mogli da pročitate da su apstraktne one klase koje se ne mogu instancirati. Sa druge strane, sve one klase koje se mogu instancirati nazivaju se konkretne. Tako se može reći da jedna klasa u Java jeziku može biti apstraktna ili konkretna. &lt;/p&gt;
&lt;h2 id="apstraktne-metode"&gt;Apstraktne metode&lt;/h2&gt;
&lt;p&gt;Još jedna osobenost apstraktnih klasa jeste njihova mogućnost da sadrže apstraktne metode. Reč je o metodama koje ne poseduju implementaciju, odnosno logiku, već samo potpis: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;checkStock&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unutar klase &lt;code&gt;Product&lt;/code&gt; sada je postavljena i jedna apstraktna metoda sa nazivom &lt;code&gt;checkStock()&lt;/code&gt;. Da je reč o apstraktnoj metodi znamo na osnovu upotrebe ključne reči &lt;code&gt;abstract&lt;/code&gt; prilikom njenog deklarisanja. Opet važi identično pravilo kao i prilikom kreiranja apstraktnih klasa: ključna reč &lt;code&gt;abstract&lt;/code&gt; navodi se odmah nakon modifikatora pristupa, ali pre tipa povratne vrednosti. &lt;/p&gt;
&lt;p&gt;Apstraktne metode ne smeju imati telo, stoga je definisanje apstraktne metode sa telom sintaksna greška (slika 2.2). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.2. Apstraktne metode ne mogu imati telo" src="/images/AdvancedJavaProgramming/1_02_02.png"/&gt;
&lt;figcaption&gt;Slika 2.2. Apstraktne metode ne mogu imati telo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;S obzirom na to da ne mogu imati telo i da se mogu pojaviti samo unutar klasa koje se ne mogu instancirati (čitaj: apstraktnih klasa), kao logično se nameće pitanje svrhe apstraktnih metoda. Apstraktne metode imaju jednu vrlo važnu ulogu u objektno orijentisanom programiranju. One se zapravo koriste da obavežu sve klase koje nasleđuju neku klasu da moraju obezbediti implementaciju svih metode koje su u roditeljskoj klasi označene kao apstraktne. Neispunjenje takve obaveze stvara grešku, pa stoga u ovom trenutku imamo tri greške u našem projektu (slika 2.3). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.3. Obaveza klase da implementira apstraktne metode" src="/images/AdvancedJavaProgramming/1_02_03.png"/&gt;
&lt;figcaption&gt;Slika 2.3. Obaveza klase da implementira apstraktne metode&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Slika 2.3. ilustruje poruku iz jedne od klasa koje nasleđuju klasu &lt;code&gt;Product&lt;/code&gt; unutar našeg Java programa. I u ostalim klasama postoji identična greška - apstraktna metoda &lt;code&gt;checkStock()&lt;/code&gt; iz roditeljske klase se mora implementirati u nasleđenoj klasi: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Monitor product3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Monitor(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Dell"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"U2419H"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;219.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;24&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product3.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;checkStock&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Monitor.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Monitor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Monitor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;diagonal&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"diagonal="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;checkStock&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) (Math.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;random&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;100&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Na dnu klase &lt;code&gt;Monitor&lt;/code&gt; sada možete da vidite metodu &lt;code&gt;checkStock()&lt;/code&gt;, koja poseduje implementaciju, odnosno telo sa logikom koja utvrđuje stanje rezervi određenog proizvoda. Logika za utvrđivanje stanja zaliha služi samo radi ilustracije, pa metoda &lt;code&gt;checkStock()&lt;/code&gt; kao svoju povratnu vrednost može da emituje broj u rasponu od 0 do 99. U realnim okolnostima, unutar metode &lt;code&gt;checkStock()&lt;/code&gt; verovatno bi se nalazila logika koja bi podatke o stanju zaliha čitala iz nekog lokalnog ili udaljenog skladišta podataka. &lt;br/&gt;
Metoda &lt;code&gt;checkStock()&lt;/code&gt; obeležena je oznakom &lt;code&gt;@Override&lt;/code&gt;, kako bi se naznačilo da istoimena metoda postoji i unutar roditeljske klase. I zaista, implementacija apstraktnih metoda je jedan od klasičnih primera redefinisanja metoda, odnosno polimorfizma. &lt;/p&gt;
&lt;h4 id="intellij-idea-tip-implementiranje-apstraktnih-metoda"&gt;IntelliJ IDEA Tip: Implementiranje apstraktnih metoda&lt;/h4&gt;
&lt;p&gt;Apstraktne metode iz roditeljskih klasa veoma lako se mogu implementirati korišćenjem razvojnog okruženja IntelliJ IDEA. Dovoljno je odabrati opciju &lt;strong&gt;Implement methods_&lt;/strong&gt; koja postoji unutar panela koji se dobija kada se kursor miša postavi iznad podvučenog dela koda u situaciji kada postoje apstraktne metode koje nisu implementirane (slika 2.4). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.4. Implementiranje apstraktnih metoda korišćenjem IntelliJ IDEA okruženja" src="/images/AdvancedJavaProgramming/1_02_04.png"/&gt;
&lt;figcaption&gt;Slika 2.4. Implementiranje apstraktnih metoda korišćenjem IntelliJ IDEA okruženja&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Klikom na opciju &lt;strong&gt;Implement methods&lt;/strong&gt; otvara se prozor za odabir metoda koje će biti implementirane (slika 2.5). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.5. Prozor za odabir metoda koje će biti implementirane" src="/images/AdvancedJavaProgramming/1_02_05.png"/&gt;
&lt;figcaption&gt;Slika 2.5. Prozor za odabir metoda koje će biti implementirane&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;U našem primeru postoji samo jedna metoda za implementiranje (&lt;code&gt;checkStock&lt;/code&gt;), a pored odabira metoda za implementaciju, prozor sa slike 2.5. omogućava da odlučimo da li želimo da se JavaDoc komentari prekopiraju iz roditeljske klase i da li želimo da metoda bude obeležena &lt;code&gt;@Override&lt;/code&gt; anotacijom, kako bi se lakše moglo uočiti da je reč o metodi koja je redefinisana. &lt;br/&gt;
Klikom na dugme OK dobija se implementacija metode &lt;code&gt;checkStock()&lt;/code&gt;, sa podrazumevanom logikom: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;checkStock&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jedini scenario u kome implementiranje apstraktnih metoda nije neophodno jeste onda kada i sama klasa koja nasleđuje nije konkretna. To praktično znači da se apstraktna metoda &lt;code&gt;checkStock()&lt;/code&gt; ne bi morala implementirati onda kada bi i klasa &lt;code&gt;Monitor&lt;/code&gt; bila apstraktna. Ipak, apstraktne metode iz svih roditeljskih klasa moraju se implementirati u prvoj konkretnoj klasi u lancu nasleđivanja. &lt;/p&gt;
&lt;p&gt;Apstraktne klase mogu posedovati i klasične metode &lt;br/&gt;
Osobenost apstraktnih klasa jeste mogućnost postojanja apstraktnih metoda. Ipak, ništa ne sprečava apstraktne klase da pored apstraktnih metoda poseduju i klasične metode, odnosno metode koje imaju telo. Takođe, apstraktne klase mogu posedovati i sve ostale elemente koji se mogu naći unutar Java klasa - svojstva, konstruktore... &lt;/p&gt;
&lt;h2 id="interfejsi"&gt;Interfejsi&lt;/h2&gt;
&lt;p&gt;Esencijalni sastojak gotovo svakog objektno orijentisanog programskog jezika jesu i interfejsi. Odmah je potrebno razumeti da se pod pojmom interfejsa u objektno orijentisanom programiranju ne podrazumeva bilo kakvo korisničko okruženje (User Interface – UI), odnosno grafički interfejs, što je uglavnom prva pomisao koju početnici dobijaju prilikom spominjanja pojma interfejsa. Ovde je reč o pojmu sa potpuno drugačijim značenjem, odnosno o konceptu koji omogućava najviši stepen apstrakcije u objektno orijentisanim jezicima. &lt;/p&gt;
&lt;p&gt;Pre nego što se posvetimo praktičnom kreiranju interfejsa, neophodno je da razumemo odakle potiče takav naziv – interfejs. Naime, do sada ste već imali prilike da vidite da se objekti klasa ponašaju kao zaokružene celine, unutar kojih su procesom enkapsulacije objedinjena svojstva i ponašanja koja su karakteristična za tip konkretnog objekta. Sa spoljašnjim svetom, odnosno sa ostatkom programa, objekti komuniciraju primarno posredstvom metoda. Drugim rečima, nakon instanciranja neke klase i dobijanja objekta, imamo mogućnost da njima rukujemo pozivanjem njegovih metoda i obradom izlaznih podataka. Tako se može reći da su metode koje izlaže jedan objekat interfejs za vršenje interakcije sa takvim objektom. Analogija se može napraviti sa automobilom. Volan, ručica menjača, kontrole pored volana i kontakt-brava objedinjeno se mogu nazvati interfejsom koji nam je proizvođač automobila izložio kako bismo njime mogli da upravljamo. Mi ne moramo da znamo na koji način su sve nabrojane operacije realizovane ispod haube, već samo kako da koristimo interfejs koji nam je stavljen na raspolaganje. Po identičnom principu, i metode koje jedan objekat izlaže na korišćenje spoljnom svetu mogu se nazvati interfejsom za rukovanje takvim objektom. Java programski jezik omogućava da se takav interfejs artikuliše posebnim jezičkim elementom koji se kreira korišćenjem ključne reči &lt;code&gt;interface&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;U svom osnovnom obliku, interfejsi u Javi mogu da poseduju proizvoljan broj apstraktnih metoda: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kao što možete da vidite, interfejsi se kreiraju slično klasama. Razlika je upotreba ključne reči &lt;code&gt;interface&lt;/code&gt; umesto ključne reči &lt;code&gt;class&lt;/code&gt;. Prikazanim kodom kreiran je jedan interfejs sa nazivom &lt;code&gt;Storable&lt;/code&gt; i unutar njega se nalaze četiri apstraktne metode: &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt; i &lt;code&gt;delete()&lt;/code&gt;. &lt;/p&gt;
&lt;h4 id="intellij-idea-tip-kreiranje-interfejsa"&gt;IntelliJ IDEA Tip: Kreiranje interfejsa&lt;/h4&gt;
&lt;p&gt;Interfejsi se korišćenjem IntelliJ IDEA razvojnog okruženja kreiraju slično klasama. Potrebno je odabrati opciju &lt;strong&gt;New-&amp;gt;Java Class&lt;/strong&gt;, koja se nalazi u kontekstnom meniju koji se dobija desnim klikom na folder &lt;code&gt;src&lt;/code&gt; (slika 2.6). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.6. Opcija za kreiranje nove klase (interfejsa)" src="/images/AdvancedJavaProgramming/1_02_06.png"/&gt;
&lt;figcaption&gt;Slika 2.6. Opcija za kreiranje nove klase (interfejsa)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;U prozoru koji se zatim dobija, potrebno je uneti naziv interfejsa i odabrati opciju &lt;strong&gt;Interface&lt;/strong&gt; (slika 2.7). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.7. Prozor za unos naziva novog interfejsa" src="/images/AdvancedJavaProgramming/1_02_07.png"/&gt;
&lt;figcaption&gt;Slika 2.7. Prozor za unos naziva novog interfejsa&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Nakon potvrđivanja pritiskom na taster Enter ili duplim klikom na opciju &lt;strong&gt;Interface&lt;/strong&gt;, IntelliJ IDEA kreira interfejs sa definisanim imenom, čije je telo prazno: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;U upravo kreiranom interfejsu sa nazivom &lt;code&gt;Storable&lt;/code&gt;, definisane su četiri apstraktne metode. S obzirom na to da je reč o apstraktnim metodama, one ne poseduju telo, već samo potpis. Osnovni razlog za kreiranje interfejsa jeste njihova implementacija od strane klasa. Na primer, ovako može da izgleda implementacija &lt;code&gt;Storable&lt;/code&gt; interfejsa od strane klase &lt;code&gt;Gamepad&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Storable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interfejs se implementira korišćenjem ključne reči &lt;code&gt;implements&lt;/code&gt;, nakon koje se navodi naziv interfejsa. Kada jedna klasa implementira neki interfejs, ona se obavezuje da će implemetirati sve metode koje se nalaze unutar interfejsa. To praktično znači da se unutar klase &lt;code&gt;Gamepad&lt;/code&gt; moraju implemetirati sve metode koje postoje unutar interfejsa &lt;code&gt;Storable&lt;/code&gt; (slika 2.8). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 2.8. Prilikom implementiranja interfejsa moraju se implementirati sve njegove apstraktne metode" src="/images/AdvancedJavaProgramming/1_02_08.png"/&gt;
&lt;figcaption&gt;Slika 2.8. Prilikom implementiranja interfejsa moraju se implementirati sve njegove apstraktne metode&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Kako bi klasa &lt;code&gt;Gamepad&lt;/code&gt; ispunila obećanje dato implementiranjem interfejsa, neophodno je da unutar nje budu implementirane sve metode iz interfejsa: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Gamepad product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		product1.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Product.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #848484"&gt;//...&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Gamepad.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Gamepad.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Storable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;wireless&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"wireless="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for reading&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for writing&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for updating&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for deleting&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Storable.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Storable.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Možemo da zaključimo da se korišćenjem interfejsa &lt;code&gt;Storable&lt;/code&gt; klasa &lt;code&gt;Gamepad&lt;/code&gt; obavezala da će unutar sebe imati četiri metode koje su definisane unutar takvog interfejsa. &lt;/p&gt;
&lt;p&gt;Interfejs &lt;code&gt;Storable&lt;/code&gt; &lt;br/&gt;
Prilikom demonstracije upotrebe interfejsa, u ovoj lekciji smo se odlučili za jedan realan primer interfejsa. Naime, upravo kreirani interfejs &lt;code&gt;Storable&lt;/code&gt; može se koristiti da naznači da neka klasa poseduje metode za obavljanje osnovnih operacija nad skladištem podataka. &lt;br/&gt;
U realnim aplikacijama, podaci se čuvaju unutar različitih vrsta skladišta podataka. Na primer, podaci se mogu čuvati unutar običnih tekstualnih fajlova, ali i unutar specijalizovanih skladišta koja se nazivaju baze podataka. Podaci iz takvih skladišta se unutar Java programa predstavljaju kao objekti odgovarajućih klasa. U primeru iz ove lekcije, to bi značilo da se podaci o proizvodima nalaze u nekoj bazi podataka. Java program takvim podacima rukuje u objektnom obliku, pri čemu se metode &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt; i &lt;code&gt;delete()&lt;/code&gt; koriste za obavljanje četiri osnovne operacije nad podacima - čitanje, pisanje, ažuriranje i brisanje, respektivno. Implementacija interfejsa &lt;code&gt;Storable&lt;/code&gt; u primeru naše aplikacije jeste garancija da objekti neke klase poseduju četiri upravo spomenute metode za obavljanje osnovnih operacija nad skladištem podataka. &lt;/p&gt;
&lt;p&gt;Metode koje se definišu unutar interfejsa su podrazumevano javne apstraktne metode. Upravo zbog toga je ključne reči &lt;code&gt;public&lt;/code&gt; i &lt;code&gt;abstract&lt;/code&gt; moguće izostaviti i napisati sledeće: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="razlika-izmeu-interfejsa-i-apstraktnih-klasa"&gt;Razlika između interfejsa i apstraktnih klasa&lt;/h3&gt;
&lt;p&gt;U ovom trenutku se možete pitati zbog čega su nam potrebni interfejsi, kada smo identično mogli da postignemo i korišćenjem apstraktne klase i apstraktnih metoda unutar nje. Jednostavno smo mogli da apstraktne metode iz interfejsa definišemo unutar roditeljske &lt;code&gt;Product&lt;/code&gt; klase i efekat bi bio identičan, odnosno i tada bismo klasu &lt;code&gt;Gamepad&lt;/code&gt; obavezali da mora imati implementacije sve četiri metode iz interfejsa. Ipak, postoji nekoliko značajnih razlika između apstraktnih klasa i interfejsa. &lt;/p&gt;
&lt;p&gt;Apstraktne klase se nasleđuju, dok se interfejsi implementiraju &lt;br/&gt;
Prva razlika je kozmetičke mprirode. Apstraktne klase se nasleđuju, dok se interfejsi implementiraju, a takve operacije su propraćene i upotrebom odgovarajućih ključnih reči - &lt;code&gt;extends&lt;/code&gt; i &lt;code&gt;implements&lt;/code&gt;, respektivno. &lt;/p&gt;
&lt;p&gt;Jedna klasa može da nasledi samo jednu apstraktnu klasu, ali zato može da implemetira proizvoljan broj interfejsa &lt;br/&gt;
Prva značajna razlika između apstraktnih klasa i interfejsa odnosi se na mogućnost višestruke implementacije. Naime, jedna klasa može da implementira veći broj interfejsa, što nije slučaj prilikom nasleđivanja klasa. Stoga mi sada možemo napraviti još jedan interfejs, a onda njega implementirati od strane klase &lt;code&gt;Gamepad&lt;/code&gt;. Evo kako izgleda novi interfejs: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Searchable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;search&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Klasa &lt;code&gt;Gamepad&lt;/code&gt;, pored već implementiranog interfejsa, sada može da implementira i &lt;code&gt;interfejs&lt;/code&gt;Searchable`: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Storable, Searchable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Klasa &lt;code&gt;Gamepad&lt;/code&gt; sada implementira dva interfejsa. Jednostavno, nakon ključne reči &lt;code&gt;implements&lt;/code&gt; moguće je navesti veći broj interfejsa, koji se razdvajaju karakterom zapeta. &lt;/p&gt;
&lt;p&gt;Sada u okviru radnog okruženja možete dodati novi fajl &lt;code&gt;Searchable.java u kome bi se nalazio istoimeni interfejs, i onda klasa&lt;/code&gt;Gamepad&lt;code&gt;može da njegovom implementacijom nasledi&lt;/code&gt;search()` metodu. &lt;/p&gt;
&lt;p&gt;Jedan interfejs može biti implementiran od strane proizvoljnog broja klasa, pa čak i kada one međusobno nemaju nikakvih dodirnih tačaka &lt;br/&gt;
Svakako najznačajnija osobenost interfejsa, i ujedno ono što ih razlikuje od apstraktnih klasa, jeste mogućnost implementacije interfejsa od strane klasa koje nemaju nikakvih dodirnih tačaka. Naime, interfejsi nisu vezani za neki konkretan tip ili grupu tipova. Jedan interfejs se može implementirati od strane klasa koje nemaju nikakvih dodirnih tačaka, što je u potpunosti suprotno od onoga što važi za apstraktne klase. Naime, sve klase koje nasleđuju jednu klasu moraju biti srodne, s obzirom na to da dele osobine koje su definisane unutar roditeljske klase. Za razliku od apstraktnih klasa, jedan interfejs mogu implementirati klase potpuno različitih namena. &lt;br/&gt;
Sve ovo u našem konkretnom primeru znači da interfejse &lt;code&gt;Storable&lt;/code&gt; i &lt;code&gt;Searchable&lt;/code&gt; mogu da implementiraju sve klase koje treba da imaju metode za čuvanje i pretragu: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Customer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Storable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String address;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String gender;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Customer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Customer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name, String address, String gender) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;name&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;address&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; address;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;gender&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; gender;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// read logic&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// write logic&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// update logic&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// delete logic&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je primer još jedne klase koja može postojati u našem programu. Naime, velike su šanse da program koji rukuje proizvodima ima potrebu i za predstavljanjem kupaca, odnosno klijenata. Upravo to može biti namena prikazane klase &lt;code&gt;Customer&lt;/code&gt;. &lt;code&gt;Customer&lt;/code&gt; je klasa koja ne deli osobine ni sa jednom od klasa kojima se predstavljaju proizvodi. Ipak, to ne sprečava nijednu od takvih klasa da implementira interfejs &lt;code&gt;Storable&lt;/code&gt;. Zbog toga i klasa &lt;code&gt;Customer&lt;/code&gt; implementira interfejs &lt;code&gt;Storable&lt;/code&gt; i sve metode koje se unutar njega nalaze. To je garancija da objekti ove klase poseduju metode za obavljanje osnovnih operacija nad podacima kupaca. &lt;/p&gt;
&lt;p&gt;Sada u okviru radnog okruženja možete dodati novi fajl &lt;code&gt;Customer.java&lt;/code&gt; u kome bi se nalazila istoimena klasa. &lt;/p&gt;
&lt;p&gt;Interfejsi su referentni tipovi &lt;br/&gt;
Kreiranjem novog interfejsa zapravo se dobija jedan novi referentni tip u programu koji kreiramo. To praktično znači da su &lt;code&gt;Storable&lt;/code&gt; i &lt;code&gt;Searchable&lt;/code&gt; tipovi podataka. Veoma se lako možemo uveriti da je to stvarno tako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Storable product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Naredba ilustruje kod za kreiranje jednog objekta klase &lt;code&gt;Gamepad&lt;/code&gt;. Ipak, bitno je da primetite da je referenca na takav objekat smeštena unutar promenljive tipa &lt;code&gt;Storable&lt;/code&gt;. To je dokaz da je kreiranjem interfejsa &lt;code&gt;Storable&lt;/code&gt; stvoren i jedan novi tip u našem Java programu. To takođe znači i da se objekti klase &lt;code&gt;Gamepad&lt;/code&gt; sada mogu predstaviti korišćenjem nekoliko tipova: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;korišćenjem tipa &lt;code&gt;Gamepad&lt;/code&gt;, što je osnovni tip matične klase &lt;/li&gt;
&lt;li&gt;korišćenjem tipa &lt;code&gt;Product&lt;/code&gt;, zato što klasa &lt;code&gt;Gamepad&lt;/code&gt; nasleđuje takvu klasu &lt;/li&gt;
&lt;li&gt;korišćenjem tipa &lt;code&gt;Storable&lt;/code&gt;, što je interfejs koji ova klasa implementira &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Gamepad product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Storable product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Činjenica da su interfejsi tipovi veoma je korisna u situacijama kada je potrebno rukovati objektima čije konkretne tipove ne možemo znati unapred. Na primer, zamislite metodu koja može da prihvati neki objekat koji se može sačuvati u bazi i nad takvim objektom obavlja određene provere i na kraju pokreće operaciju čuvanja: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;saveObject&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Storable object) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #848484"&gt;// do validation, and if valid call write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	object.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Metoda &lt;code&gt;saveObject()&lt;/code&gt; je klasičan primer metode koja zavisi od apstrakcije, a ne od konkretne implementacije. Šta to praktično znači? &lt;br/&gt;
Ulazni parametar metode jeste tipa &lt;code&gt;Storable&lt;/code&gt;. To je tip koji predstavlja interfejs, a interfejs ne predstavlja neki konkretan tip podatka, zato što može biti implementiran od strane bilo koje klase. Stoga smo na ovaj način omogućili metodi &lt;code&gt;saveObject()&lt;/code&gt; da prihvati objekte koji mogu da budu različitih konkretnih tipova. Njoj možemo da prosledimo objekte tipa &lt;code&gt;Gamepad&lt;/code&gt; ili objekte tipa &lt;code&gt;Customer&lt;/code&gt;, odnosno objekte svih onih konkretnih tipova koji implementiraju interfejs &lt;code&gt;Storable&lt;/code&gt;. Štaviše, metoda &lt;code&gt;saveObject()&lt;/code&gt; uopšte ne mora ni znati koji će konkretan tip da dobije. Sve što ona zna jeste da će dobiti tip koji je implemetirao interfejs &lt;code&gt;Storable&lt;/code&gt;, a to je garancija da će takav objekat sigurno imati metodu &lt;code&gt;write()&lt;/code&gt; koja je definisana unutar interfejsa &lt;code&gt;Storable&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id="podrazumevane-metode-unutar-interfejsa"&gt;Podrazumevane metode unutar interfejsa&lt;/h3&gt;
&lt;p&gt;Do sada ste imali prilike da vidite interfejse koji su unutar sebe imali apstraktne, javne metode. Javne apstraktne metode dugo su bile jedini sadržaj koji se mogao naći unutar interfejsa. Ipak, u novijim verzijama Jave takva činjenica se promenila, pa su tokom vremena u jezik dodate mogućnosti da interfejsi sadrže i neke druge članove. Za početak, unutar interfejsa se mogu naći podrazumevane metode. &lt;/p&gt;
&lt;p&gt;Podrazumevane metode omogućavaju da se unutar interfejsa definišu konkretne metode, odnosno metode koje poseduju telo. Ali, zbog čega su nam potrebne konkretne metode unutar interfejsa? &lt;/p&gt;
&lt;p&gt;Već ste imali prilike da vidite da se interfejsi mogu implementirati od strane velikog broja različitih klasa. Pri tom, sve klase koje implemetiraju jedan interfejs moraju obezbediti implementaciju svih metoda definisanih unutar tog interfejsa. Sada se postavlja pitanje – šta ukoliko se pojavi potreba za naknadnim dodavanjem još neke metode unutar interfejsa? &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exists&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sada je unutar interfejsa &lt;code&gt;Storable&lt;/code&gt; dodata još jedna metoda - &lt;code&gt;exists()&lt;/code&gt;. Reč je o metodi koja je namenjena za utvrđivanje postojanja nekog objekta unutar skladišta podataka. Kada učinimo nešto ovako, odnosno kada dodamo novu metodu unutar interfejsa, sve klase koje su implementirale takav interfejs postaju nevalidne. Drugim rečima, u ovakvoj situaciji metoda &lt;code&gt;exists()&lt;/code&gt; se mora implementirati u svim klasama koje implementiraju interfejs &lt;code&gt;Storable&lt;/code&gt; kako bi kod bio validan. U realnim okolnostima, odnosno unutar realnih Java programa, jedan interfejs može biti implementiran od strane velikog broja klasa. U takvoj situaciji, dodavanje nove metode unutar interfejsa bi podrazumevalo da se svaka od takvih klasa modifikuje, dodavanjem implementacije za metodu koja je dodata. Kako bi se prevazišao takav problem, u Java jezik je uvršćena mogućnost definisanja podrazumevanih (&lt;strong&gt;default&lt;/strong&gt;) metoda unutar interfejsa: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;default&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exists&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do malopre apstraktna metoda &lt;code&gt;exists()&lt;/code&gt; sada je pretvorena u podrazumevanu metodu, koja poseduje telo. To sve klase koje implementiraju interfejs &lt;code&gt;Storable&lt;/code&gt; oslobađa potrebe za implementacijom takve metode. Naravno, klase koje implementiraju interfejs &lt;code&gt;Storable&lt;/code&gt; imaju mogućnost da ovakvu podrazumevanu metodu redefinišu, ukoliko se za takvim nečim javi potreba: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Storable, Searchable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exists&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// Gamepad specific logic for exists() method&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;false&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sada u okviru radnog okruženja možete interfejsu &lt;code&gt;Storable&lt;/code&gt; i klasi &lt;code&gt;Gamepad&lt;/code&gt; dodati &lt;strong&gt;default&lt;/strong&gt; metodu &lt;code&gt;exists()&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id="privatne-metode-unutar-interfejsa"&gt;Privatne metode unutar interfejsa&lt;/h3&gt;
&lt;p&gt;S obzirom na to da interfejsi u Javi imaju mogućnost da poseduju konkretne metode, nekada može biti vrlo korisno određenu logiku grupisati unutar metoda koje se mogu koristiti samo unutar interfejsa, a ne i izvan njega. Do takve situacije veoma često može doći kada više podrazumevanih metoda treba da deli određenu istovetnu logiku. Takva istovetna logika se može grupisati unutar privatnih metoda unutar interfejsa: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.Java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Gamepad product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exists&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Product.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #848484"&gt;// ...&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Gamepad.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Gamepad.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Storable, Searchable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;wireless&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"wireless="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exists&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// Gamepad specific logic for exists() method&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;false&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;search&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for searching&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for reading&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for writing&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for updating&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #848484"&gt;// logic for deleting&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Storable.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Storable.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;read&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;write&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;delete&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;default&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;exists&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		method1();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		method2();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;method1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello from private method1"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;method2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello from private method2"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Searchable.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Searchable.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Searchable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;search&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Unutar interfejsa &lt;code&gt;Storable&lt;/code&gt; sada su dodate dve privatne metode - &lt;code&gt;method1()&lt;/code&gt; i &lt;code&gt;method2()&lt;/code&gt;, koje se koriste od strane podrazumevane metode. Bitno je razumeti nekoliko važnih činjenica o privatnim metodama unutar interfejsa: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;privatne metode unutar interfejsa namenjene su lokalnoj upotrebi, odnosno, one se mogu koristiti samo unutar interfejsa u kome su definisane &lt;/li&gt;
&lt;li&gt;privatne metode unutar interfejsa ne mogu biti apstraktne, te moraju posedovati telo sa logikom &lt;/li&gt;
&lt;li&gt;privatne metode unutar interfejsa nisu namenjene za spoljašnju upotrebu, tako da se ne implementiraju niti ih je moguće redefinisati u konkretnim klasama &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="konstante-unutar-interfejsa"&gt;Konstante unutar interfejsa&lt;/h3&gt;
&lt;p&gt;Na kraju, još jedan element koji može postojati unutar Java interfejsa jesu i &lt;strong&gt;konstante&lt;/strong&gt;. Tako je, pored metoda, unutar interfejsa moguće definisati i javna, statička, finalna polja, koja moraju posedovati vrednost: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;final&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; SOME_CONSTANT &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zapravo, svako polje koje se definiše unutar interfejsa mora biti javno, statičko i finalno, te je stoga upravo prikazani kod ekvivalentan ovom: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Storable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; SOME_CONSTANT &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;13&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	...&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Razlog zbog koga su sva polja unutar interfejsa podrazumevano statička vrlo je jednostavan. Interfejsi se ne mogu instancirati, pa se tako polja koja se unutar njih definišu dele između svih klasa koje takav interfejs implementiraju. &lt;/p&gt;
&lt;p&gt;Konstante unutar interfejsa je moguće definisati ukoliko znamo da će za njihovim korišćenjem postojati potreba kod svih klasa koje će interfejs implementirati. U takvoj situaciji, umesto definisanja konstante u svakoj konkretnoj klasi pojedinačno, sve one će imati pristup zajedničkoj konstanti koja postoji unutar interfejsa. Ipak, potrebno je voditi računa da konstanta zaista bude čvrsto vezana za samu namenu interfejsa. U programerskim krugovima dugo se vodi debata o opravdanosti korišćenja konstanti unutar interfejsa, s obzirom na to da se konstante smatraju detaljem koji se bavi implementacijom, dok su interfejsi primarno namenjeni za postizanje apstrakcije. &lt;/p&gt;
&lt;p&gt;Imenovanje interfejsa &lt;br/&gt;
Veoma česta praksa jeste imenovanje interfejsa korišćenjem engleskih prideva koji poseduju sufiks &lt;strong&gt;-able&lt;/strong&gt; ili &lt;strong&gt;-ible&lt;/strong&gt;. Reč je o pridevima koji nastaju od glagola: &lt;code&gt;Comparable&lt;/code&gt;, &lt;code&gt;Iterable&lt;/code&gt;, &lt;code&gt;Storable&lt;/code&gt;, &lt;code&gt;Queryable&lt;/code&gt;... Ovakvi nazivi koriste se da označe da je neka klasa sposobna za obavljanje određenih operacija, sadržanih u nazivu interfejsa. Na primer, &lt;code&gt;Comparable&lt;/code&gt; je naziv koji oslikava da se objekti klasa koje implementiraju takav interfejs mogu porediti. &lt;br/&gt;
Formiranje naziva interfejsa koji se završavaju sufiksima &lt;strong&gt;-able&lt;/strong&gt; i &lt;strong&gt;-ible&lt;/strong&gt; nije pravilo, već samo česta praksa. Stoga je interfejse moguće imenovati proizvoljnim nazivom, sve dok se pridržavamo pravila za formiranje identifikatora u Java jeziku. &lt;/p&gt;
&lt;h2 id="vezbe"&gt;Vežbe&lt;/h2&gt;
&lt;h3 id="vezba-1"&gt;Vežba 1&lt;/h3&gt;
&lt;p&gt;Potrebno je napraviti aplikaciju za restoran brze hrane. Aplikacija će rukovati proizvodima restorana. Restoran brze hrane u ponudi poseduje pice i sendviče. Neophodno je napraviti odgovarajuće klase za modelovanje pica i sendviča i za njihovo predstavljanje u Java programu. Prilikom realizacije je potrebno upotrebiti apstraktne klase i apstraktne metode. &lt;br/&gt;
Sendviči i pice treba da budu određeni sledećim svojstvima: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;naziv, String podatak &lt;/li&gt;
&lt;li&gt;cena, double podatak &lt;/li&gt;
&lt;li&gt;maksimalno 10 začina (priloga), niz String vrednosti &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nad proizvodima (picama i sendvičima) potrebno je omogućiti obavljanje nekoliko operacija, kroz sledeće metode: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;metoda &lt;code&gt;addSpice()&lt;/code&gt; koja unosi začin &lt;/li&gt;
&lt;li&gt;metoda &lt;code&gt;allSpices()&lt;/code&gt; koja vraća sve začine u tekstualnom obliku &lt;/li&gt;
&lt;li&gt;apstraktna metoda &lt;code&gt;countPrice()&lt;/code&gt; koja izračunava cenu na osnovu tipa proizvoda; porez na picu je 10%, dok je porez na sendviče 15% &lt;/li&gt;
&lt;li&gt;metoda &lt;code&gt;toString()&lt;/code&gt; koja prikazuje podatke o proizvodu u sledećoj formi: &lt;br/&gt;
    Product: pizza, price: 25.45, spices: tomato, mustard, mayonnaise &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Potrebno je napraviti klase &lt;code&gt;Product&lt;/code&gt;, &lt;code&gt;Pizza&lt;/code&gt; i &lt;code&gt;Sandwich&lt;/code&gt;. Klase &lt;code&gt;Pizza&lt;/code&gt; i &lt;code&gt;Sandwich&lt;/code&gt; naslediće apstraktnu klasu &lt;code&gt;Product&lt;/code&gt;. Na kraju je potrebno kreirati po jednu instancu klasa &lt;code&gt;Pizza&lt;/code&gt; i &lt;code&gt;Sandwich&lt;/code&gt; u &lt;code&gt;main()&lt;/code&gt; metodi. &lt;/p&gt;
&lt;h4 id="resenje"&gt;Rešenje&lt;/h4&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Product.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; type;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; spices;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;countPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;spices&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #f99b15"&gt;10&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;name&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		StringBuilder output &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; StringBuilder();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Product: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;name&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"price: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(countPrice()).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"spices: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(allSpices());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;allSpices&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		StringBuilder output &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; StringBuilder();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (String addition : &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;spices&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (addition &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;!=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(addition).&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;!&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;().&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;""&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;().&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;trim&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;().&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;endsWith&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;","&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;replace&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(), &lt;/span&gt;&lt;span style="color: #48b685"&gt;""&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;else&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;append&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"no spices"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; output.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addSpice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String spice) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;spices&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;++&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;spices&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;spices&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; spice;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				&lt;/span&gt;&lt;span style="color: #815ba4"&gt;break&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Pizza.java:&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Pizza.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Pizza&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Pizza&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(name, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;countPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0.1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Sandwich.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Sandwich.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Sandwich&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Sandwich&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(name, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;countPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0.15&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Pizza p &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Pizza(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Capricciosa"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;,&lt;/span&gt;&lt;span style="color: #f99b15"&gt;25&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		p.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addSpice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"tomato"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		p.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addSpice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"sour cream"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Sandwich s &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Sandwich(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Sandwich with ham"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;35&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		s.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addSpice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"cucumber"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		s.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addSpice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"onion"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		s.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addSpice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"tomato"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(p);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(s);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3 id="vezba-2"&gt;Vežba 2&lt;/h3&gt;
&lt;p&gt;U narednoj vežbi potrebno je obaviti sledeće: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;napraviti apstraktnu klasu &lt;code&gt;Quad&lt;/code&gt; koja sadrži tri polja (koordinate &lt;code&gt;x&lt;/code&gt; i &lt;code&gt;y&lt;/code&gt; i stranicu &lt;code&gt;a&lt;/code&gt;) i jednu apstraktnu metodu &lt;code&gt;setValues()&lt;/code&gt; za postavljanje svih vrednosti &lt;/li&gt;
&lt;li&gt;napraviti interfejs &lt;code&gt;Geom&lt;/code&gt; koji sadrži potpise metoda za izračunavanje površine i obima &lt;/li&gt;
&lt;li&gt;napraviti klasu &lt;code&gt;Square&lt;/code&gt; koja nasleđuje klasu &lt;code&gt;Quad&lt;/code&gt; i implementira interfejs &lt;code&gt;Geom&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;kreirati jednu instancu klase &lt;code&gt;Square&lt;/code&gt; u glavnom programu &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="resenje_1"&gt;Rešenje&lt;/h4&gt;
&lt;details&gt;
&lt;summary&gt;Quad.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Quad.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Quad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x, y, a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setValues&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Geom.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Geom.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Geom&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Square.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Square.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Square&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Quad &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Geom {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;4&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setValues&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;x&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; x;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;y&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; y;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Square s &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Square();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		s.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setValues&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;100&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;100&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;5&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(s.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(s.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h3 id="vezba-3"&gt;Vežba 3&lt;/h3&gt;
&lt;p&gt;U ovoj vežbi potrebno je kreirati dva interfejsa za aplikaciju kalkulator: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Operations&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Operands&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Operands&lt;/code&gt; treba da sadrži potpis metode &lt;code&gt;setOperands()&lt;/code&gt; koji postavlja operande na inicijalne vrednosti. Interfejs &lt;code&gt;Operations&lt;/code&gt; treba da sadrži potpise metoda sa operacijama (dovoljne su samo dve). &lt;/p&gt;
&lt;p&gt;Nakon kreiranja interfejsa, potrebno je napraviti klasu &lt;code&gt;Calculator&lt;/code&gt; koja će implementirati interfejse &lt;code&gt;Operations&lt;/code&gt; i &lt;code&gt;Operands&lt;/code&gt;. &lt;br/&gt;
Na kraju je potrebno instancirati klasu &lt;code&gt;Calculator&lt;/code&gt; i pozvati njene metode &lt;code&gt;add()&lt;/code&gt; i &lt;code&gt;sub()&lt;/code&gt; koje vrše sabiranje i oduzimanje dva realna broja. &lt;/p&gt;
&lt;h4 id="resenje_2"&gt;Rešenje&lt;/h4&gt;
&lt;details&gt;
&lt;summary&gt;Operands.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Operants.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Operands&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setOperands&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Operations.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Operations.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Operations&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;add&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sub&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Calculator.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Calculator.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Calculator&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Operations, Operands {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;add&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sub&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setOperands&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Calculator c &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Calculator();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		c.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setOperands&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;3&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(c.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;add&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(c.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sub&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="klase"></category><category term="interfejsi"></category><category term="apstrakcija"></category></entry><entry><title>AJP 1.1. Objektno orijentisano programiranje u Javi</title><link href="https://vlajna95.github.io/articles/ajp-11-objektno-orijentisano-programiranje-u-javi" rel="alternate"></link><published>2022-01-10T15:33:00+01:00</published><updated>2022-01-10T15:33:00+01:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-01-10:/articles/ajp-11-objektno-orijentisano-programiranje-u-javi</id><summary type="html">&lt;p&gt;Uvod u objektno orijentisano programiranje u Javi i najvažniji pojmovi&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Kurs pred vama biće posvećen naprednim konceptima programiranja korišćenjem programskog jezika Java. Tako ćete imati prilike da proširite svoje znanje upoznavanjem različitih koncepata koji su neophodni za kreiranje kompleksnijih Java programa. Uvodni modul ovog kursa pomoći će vam da proširite razumevanje objektno orijentisanog programiranja u Javi. Za početak, uvodna lekcija ovog modula biće posvećena osnovnim postulatima OOP u Javi, što će vam pomoći da bolje razumete napredne koncepte koji će biti predstavljeni u lekcijama koje slede. Stoga će u ovoj lekciji biti objašnjeno šta su to objekti i klase, koji su njihovi članovi, ali i šta podrazumevaju pojmovi apstrakcije, enkapsulacije, nasleđivanja i polimorfizma, koji predstavljaju osnovne postulate objektno orijentisanog programiranja. &lt;/p&gt;
&lt;h2 id="pojam-objektno-orijentisanog-programiranja"&gt;Pojam objektno orijentisanog programiranja&lt;/h2&gt;
&lt;p&gt;Java je objektno orijentisan programski jezik, što praktično znači da su klase i objekti njegove centralne figure. Objekti su način da se unutar Java programa predstave podaci po uzoru na pojmove iz realnog sveta. U praksi to znači da se objektima mogu vrlo efikasno predstaviti podaci koji su potrebni našim Java programima. Na primer, ukoliko kreiramo program koji rukuje proizvodima koji predstavljaju tehničku robu, svaki takav artikal (proizvod) bio bi jedan objekat (slika 1.1). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 1.1. Objekti" src="/images/AdvancedJavaProgramming/1_01_01.png"/&gt;
&lt;figcaption&gt;Slika 1.1. Objekti&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Objekti se kreiraju na osnovu određenog šablona, odnosno modela. U objektno orijentisanom programiranju takvi šabloni se drugačije nazivaju klase (slika 1.2). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 1.2. Objekti nastaju na osnovu klasa" src="/images/AdvancedJavaProgramming/1_01_02.png"/&gt;
&lt;figcaption&gt;Slika 1.2. Objekti nastaju na osnovu klasa&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="klase"&gt;Klase&lt;/h2&gt;
&lt;p&gt;Preduslov za kreiranje objekata u Java jeziku jeste postojanje klase. Unutar klase definišu se sve one osobine, odnosno svojstva i ponašanja, koja će objekti koji se na osnovu takve klase kreiraju imati. &lt;/p&gt;
&lt;p&gt;Procesom kreiranja klasa obavlja se modelovanje specifičnih tipova podataka koji su potrebni za funkcionisanje programa koje stvaramo. Tako na primer, ukoliko će naš program rukovati nekim proizvodima, klasa za njihovo modelovanje bi mogla da izgleda ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;

&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prikazani kod ilustruje klasu &lt;code&gt;Product&lt;/code&gt;, koja se u Java programu može koristiti za predstavljanje proizvoda. &lt;code&gt;Product&lt;/code&gt; klasa poseduje nekoliko veoma važnih elemenata čiju svrhu je neophodno razumeti. &lt;/p&gt;
&lt;h3 id="privatna-svojstva"&gt;Privatna svojstva&lt;/h3&gt;
&lt;p&gt;Svojstva definišu karakteristike koje će moći da imaju objekti koji se kreiraju korišćenjem klase. U prikazanoj klasi postoje sledeća svojstva: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo praktično znači da će svi objekti koji budu kreirani korišćenjem klase &lt;code&gt;Product&lt;/code&gt; moći da budu karakterisani korišćenjem informacija o brendu, modelu i ceni. &lt;/p&gt;
&lt;p&gt;Upravo prikazana svojstva su privatna, što znači da im je moguće pristupiti samo iz klase u kojoj su definisana. &lt;/p&gt;
&lt;h3 id="metode-get-i-set"&gt;Metode &lt;strong&gt;get&lt;/strong&gt; i &lt;strong&gt;set&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Za pristup privatnim svojstvima izvan klase &lt;code&gt;Product&lt;/code&gt; koriste se &lt;strong&gt;get&lt;/strong&gt; i &lt;strong&gt;set&lt;/strong&gt; metode. Reč je o javnim metodama koje omogućavaju čitanje i izmenu vrednosti privatnih svojstava: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Za svako svojstvo definisane su po dve metode. Metode sa prefiksom &lt;strong&gt;set&lt;/strong&gt; koriste se za postavljanje vrednosti privatnih svojstava, a metode sa prefiksom &lt;strong&gt;get&lt;/strong&gt; za čitanje njihovih vrednosti. &lt;/p&gt;
&lt;h3 id="konstruktor"&gt;Konstruktor&lt;/h3&gt;
&lt;p&gt;Unutar klase &lt;code&gt;Product&lt;/code&gt; postoji jedan konstruktor, što je zapravo metoda koja se poziva prilikom kreiranja objekata: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unutar konstruktora se obavlja inicijalizacija svojstava objekta vrednostima koje su prilikom kreiranja objekta prosleđene konstruktoru. &lt;/p&gt;
&lt;h3 id="metoda-tostring"&gt;Metoda &lt;code&gt;toString()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Klasa &lt;code&gt;Product&lt;/code&gt; poseduje i metodu &lt;code&gt;toString()&lt;/code&gt;, unutar koje je definisana logika za generisanje tekstualne reprezentacije objekta: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pozivanjem metode &lt;code&gt;toString()&lt;/code&gt; obavlja se ispis informacija o objektu, što podrazumeva ispis vrednosti njegovih svojstava. &lt;/p&gt;
&lt;h2 id="objekti"&gt;Objekti&lt;/h2&gt;
&lt;p&gt;Na osnovu upravo kreirane klase ćemo prvo obaviti kreiranje nekoliko objekata, a zatim ćemo se detaljnije upoznati sa upravo prikazanim elementima koji čine jednu klasu. Jedan objekat na osnovu klase &lt;code&gt;Product&lt;/code&gt; može se kreirati na sledeći način: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je primer kreiranja objekta na osnovu klase &lt;code&gt;Product&lt;/code&gt;. Objekat se kreira upotrebom ključne reči &lt;code&gt;new&lt;/code&gt;, nakon koje sledi poziv konstruktora, kome se prosleđuju vrednosti koje će biti dodeljene svojstvima. &lt;/p&gt;
&lt;p&gt;Proces kreiranja objekata se drugačije naziva instanciranje, pa se tako može reći da prikazana naredba oslikava instanciranje klase &lt;code&gt;Product&lt;/code&gt;. Instanciranjem je u našem programu predstavljen prvi od tri proizvoda sa uvodnih slika 1.1. i 1.2. Naravno, na osnovu jedne klase može se stvoriti proizvoljan broj objekata, pa je tako korišćenjem klase &lt;code&gt;Product&lt;/code&gt; u našem programu sada moguće predstaviti sve proizvode sa slika 1.1 i 1.2. &lt;/p&gt;
&lt;p&gt;Nad kreiranim objektima moguće je pozivati metodu &lt;code&gt;toString()&lt;/code&gt;, koja će za rezultat imati generisanje tekstualne reprezentacije objekata: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Product product2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"HP"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Envy Photo 7155"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;179.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Product product3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Dell"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"U2419H"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;219.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product3);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Product.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setBrand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String model) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setPrice&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Na ovaj način na izlazu se stvara sledeći ispis: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Brand='Logitech', Model='F710', Price=129.99
Brand='HP', Model='Envy Photo 7155', Price=179.99
Brand='Dell', Model='U2419H', Price=219.99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;Na početku ove lekcije spomenuti su i pojmovi osnovnih postulata objektno orijentisanog programiranja. Reč je o apstrakciji, enkapsulaciji, nasleđivanju i polimorfizmu. O njima će biti reči u nastavku ove lekcije. &lt;/p&gt;
&lt;h2 id="apstrakcija"&gt;Apstrakcija&lt;/h2&gt;
&lt;p&gt;Apstrakcija je princip objektno orijentisanog programiranja koji omogućava da se složeni entiteti iz realnog sveta modeluju baš onako kako mi želimo - sa nivoom detalja koji odgovara potrebama našeg programa. To znači da je u ovoj lekciji već ilustrovan primer apstrakcije i to upravo prilikom kreiranja klase &lt;code&gt;Product&lt;/code&gt;. Njenim kreiranjem obavljeno je modelovanje proizvoda, odnosno tipa podatka koji je našem programu potreban. &lt;/p&gt;
&lt;h2 id="enkapsulacija"&gt;Enkapsulacija&lt;/h2&gt;
&lt;p&gt;Objekat predstavlja zaokruženu celinu, zato što u potpunosti opisuje jedan pojam iz realnog sveta. Unutar objekata objedinjuju se informacije i funkcionalnosti koje se tiču entiteta koji se modeluje. Objedinjavanje takvih informacija i funkcionalnosti drugačije se naziva enkapsulacija. &lt;/p&gt;
&lt;p&gt;I enkapsulacija je princip objektno orijentisanog programiranja koji je već ilustrovan na prikazanom primeru klase &lt;code&gt;Product&lt;/code&gt;. Naime, enkapsulacijom se svojstva i metode &lt;code&gt;Product&lt;/code&gt; objekata prezentuju kao celina, kojom se rukuje korišćenjem naziva promenljive koja čuva referencu na takav objekat. &lt;/p&gt;
&lt;p&gt;Enkapsulacija je ilustrovana i na primeru privatnih objektnih svojstava, kojima se izvan klase pristupa korišćenjem specijalnih metoda koje se koriste za upis i čitanje vrednosti privatnih svojstava. Postojanje &lt;strong&gt;get&lt;/strong&gt; i &lt;strong&gt;set&lt;/strong&gt; metoda omogućava kontrolisanu interakciju sa privatnim poljima, pa one predstavljaju još jedan svojevrstan primer enkapsulacije. &lt;/p&gt;
&lt;h2 id="nasleivanje"&gt;Nasleđivanje&lt;/h2&gt;
&lt;p&gt;Nasleđivanje je još jedan postulat objektno orijentisanog programiranja koji omogućava kreiranje klasa koje svoje osobine i ponašanja nasleđuju od neke druge klase. U upravo prikazanom primeru smo kreirali samo jednu klasu (&lt;code&gt;Product&lt;/code&gt;), tako da samostalno nismo definisali bilo kakvo nasleđivanje. Ipak, to ne znači da u primeru iz ove lekcije ne postoji nasleđivanje. Naime, sve klase u programskom jeziku Java implicitno nasleđuju osnovnu klasu tog jezika - klasu &lt;code&gt;Object&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; je korena klasa u jeziku Java. To praktično znači da sve druge klase nju indirektno nasleđuju (slika 1.3). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 1.3. Object je osnovna klasa Java jezika" src="/images/AdvancedJavaProgramming/1_01_03.png"/&gt;
&lt;figcaption&gt;Slika 1.3. Object je osnovna klasa Java jezika&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Na slici 1.3. možete da vidite hijerarhiju nasleđivanja između klasa u Java jeziku. Na vrhu takve hijerarhije nalazi se klasa &lt;code&gt;Object&lt;/code&gt;. Sve klase u Javi mogu biti nasleđene. Nasleđena klasa postaje roditeljska klasa za sve klase koje je nasleđuju. Takođe, sve klase u Javi imaju svoju roditeljsku klasu, osim klase &lt;code&gt;Object&lt;/code&gt; koja se nalazi na vrhu klasne hijerarhije. &lt;/p&gt;
&lt;p&gt;S obzirom na to da sve klase nasleđuju klasu &lt;code&gt;Object&lt;/code&gt;, to znači i da naša klasa &lt;code&gt;Product&lt;/code&gt; iz ove lekcije to čini. Ipak, primer modelovanja proizvoda u jednom Java programu idealan je za uvođenje nekoliko dodatnih konkretnijih klasa, koje bi nasledile već kreiranu klasu &lt;code&gt;Product&lt;/code&gt;. Naime, različite grupe proizvoda se mogu predstaviti sopstvenim klasama, pa tako u primer možemo da uvedemo i nekoliko dodatnih klasa: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Gamepad&lt;/code&gt;, za predstavljanje kontrolera za video-igre &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monitor&lt;/code&gt;, za predstavljanje kompjuterskih monitora &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Printer&lt;/code&gt;, za predstavljanje štampača &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Svaka od upravo navedenih klasa predstavlja specifičnu vrstu proizvoda, koji poseduju osobine koje ih razlikuju od drugih vrsta proizvoda. To znači da će u Java programu svaka od ovih klasa imati neka specifična svojstva. &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Program.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Gamepad product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Gamepad(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Logitech"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"F710"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;129.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Printer product2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Printer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"HP"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Envy Photo 7155"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;179.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #815ba4"&gt;true&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Monitor product3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Monitor(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Dell"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"U2419H"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;219.99&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;24&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product3);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Product.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Product.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #848484"&gt;// ...&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Brand='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Model='"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; '\'' &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", Price="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Gamepad.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Gamepad.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;wireless&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"wireless="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; wireless;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Monitor.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Monitor.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Monitor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Monitor&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;diagonal&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"diagonal="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; diagonal;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Printer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;// Printer.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Printer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Printer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price, &lt;/span&gt;&lt;span style="color: #fec418"&gt;boolean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(brand, model, price);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;color&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;", "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"color="&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; color;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;U sve tri klase koje nasleđuju klasu &lt;code&gt;Product&lt;/code&gt; postoji identična logika. Svaka od klasa definiše po jednu dodatnu osobinu specifične grupe proizvoda. Klasa &lt;code&gt;Gamepad&lt;/code&gt; poseduje svojstvo &lt;code&gt;wireless&lt;/code&gt;, kojim je moguće definisati da li je reč o bežičnom kontroleru ili ne. Klasa &lt;code&gt;Monitor&lt;/code&gt; poseduje svojstvo &lt;code&gt;diagonal&lt;/code&gt;, kojim je moguće definisati veličinu dijagonale displeja u inčima. Na kraju, klasa &lt;code&gt;Printer&lt;/code&gt; poseduje svojstvo &lt;code&gt;color&lt;/code&gt;, koje se može koristiti kako bi se naznačilo da li štampač ima mogućnost štampe u boji. &lt;/p&gt;
&lt;p&gt;Sve tri klase poseduju po jedan konstruktor. Unutar njih, prvo se obavlja pozivanje roditeljskog konstruktora, korišćenjem posebne ključne reči &lt;code&gt;super&lt;/code&gt;. Kada se ključna reč &lt;code&gt;super&lt;/code&gt; upotrebi u obliku metode, njom se postiže pozivanje konstruktora roditeljske klase. Tako se konstruktor roditeljske klase upošljava kako bi obavio inicijalizaciju svojstava koja su definisana unutar klase &lt;code&gt;Product&lt;/code&gt;, dok se unutar konkretnih klasa obavlja inicijalizacija samo onih svojstava koja su karakteristična za konkretne klase. &lt;/p&gt;
&lt;p&gt;Na kraju, svaka od upravo prikazanih konkretnih klasa koje predstavljaju proizvode poseduje i sopstvenu varijantu metode &lt;code&gt;toString()&lt;/code&gt;. O tome će više reči biti u narednom poglavlju o polimorfizmu. &lt;/p&gt;
&lt;h3 id="klasni-clanovi-koji-se-nasleuju"&gt;Klasni članovi koji se nasleđuju&lt;/h3&gt;
&lt;p&gt;Nasleđivanjem, klasa dobija sve metode i svojstva roditeljske klase koji nisu obeleženi kao privatni. Privatna svojstva i metode se ne nasleđuju, ali se njima može pristupiti indirektno, ukoliko ih roditeljska klasa izlaže korišćenjem nekih metoda koje nisu privatne. Primer takvih metoda su upravo &lt;strong&gt;get&lt;/strong&gt; i &lt;strong&gt;set&lt;/strong&gt; metode koje postoje unutar &lt;code&gt;Product&lt;/code&gt; klase. &lt;/p&gt;
&lt;h3 id="nasleivanje-i-konstruktori"&gt;Nasleđivanje i konstruktori&lt;/h3&gt;
&lt;p&gt;Konstruktori su još jedan klasni element koji se ne nasleđuje. Ipak, kada se govori o konstruktorima i nasleđivanju, bitno je znati još jednu vrlo važnu osobinu jezika. Naime, već je poznato da se prilikom kreiranja objekata, odnosno instanciranja neke klase, obavlja pozivanje odgovarajućeg konstruktora. Java garantuje da će se prilikom kreiranja objekata pozvati konstruktor, pa čak i kada on unutar klase nije eksplicitno kreiran. U takvim situacijama u klasi postoji podrazumevani konstruktor koji nema parametara. &lt;/p&gt;
&lt;p&gt;Pored garancije da će konstruktor biti pozvan, Java garantuje da će prilikom instanciranja neke klase biti pozvan i konstruktor koji se nalazi unutar njene roditeljske klase. Takvu garanciju Java postiže tako što na početak svakog konstruktora postavlja naredbu za poziv konstruktora iz roditeljske klase. Na primer, kada unutar &lt;code&gt;Product&lt;/code&gt; klase ne bi postojao konstruktor koji smo samostalno kreirali, Java bi za nas obavila kreiranje konstruktora sledećeg oblika: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovako bi izgledao podrazumevani konstruktor klase &lt;code&gt;Product&lt;/code&gt; koji bi kompajler samostalno kreirao u slučaju da ga nismo eksplicitno definisali. Bitno je da primetite da se na početku takvog konstruktora nalazi naredba u kojoj se poziva konstruktor roditeljske klase. &lt;br/&gt;
S obzirom na to da Java garantuje da će se konstruktor roditeljske klase uvek pozvati, kompajler dodaje naredbu za poziv roditeljskog konstruktora i na početak konstruktora koje samostalno kreiramo, ukoliko tako nešto mi ne učinimo. Kako biste ovo bolje razumeli, pogledajte sledeći konstruktor: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello from Gamepad constructor."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovako može izgledati konstruktor unutar klase &lt;code&gt;Gamepad&lt;/code&gt;, koja nasleđuje klasu &lt;code&gt;Product&lt;/code&gt;. Ipak, s obzirom na to da uvek garantuje pozivanje roditeljskog konstruktora, Java kompajler će ovakav konstruktor modifikovati na sledeći način: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Gamepad&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Hello from Gamepad constructor."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Naredba &lt;code&gt;super()&lt;/code&gt; je ono što Java kompajler dodaje za nas kako bi osigurao pozivanje roditeljskog konstruktora. Bitno je da razumete da Java kompajler uvek dodaje naredbu za poziv konstruktora bez parametara. Stoga, ukoliko se roditeljski konstruktor poziva eksplicitno, neophodno je da unutar roditeljske klase postoji konstruktor bez parametara, bilo da je reč o podrazumevanom ili o onom koji vi samostalno kreirate. Pošto mi unutar klase &lt;code&gt;Product&lt;/code&gt; nemamo konstruktor bez parametara, u nasleđenim klasama se ne možemo osloniti na automatsko dodavanje naredbe &lt;code&gt;super()&lt;/code&gt; od strane kompajlera (slika 1.4). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 1.4. Problem koji može nastati kada roditeljska klasa ne poseduje podrazumevani konstruktor" src="/images/AdvancedJavaProgramming/1_01_04.png"/&gt;
&lt;figcaption&gt;Slika 1.4. Problem koji može nastati kada roditeljska klasa ne poseduje podrazumevani konstruktor&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ovakav problem se može rešiti na dva načina. Prvi podrazumeva kreiranje konstruktora bez parametara unutar roditeljske &lt;code&gt;Product&lt;/code&gt; klase. Drugi način za rešavanje ovakve situacije jeste samostalno pozivanje konstruktora roditeljske klase, pri čemu bismo, naravno, pozvali onaj konstruktor koji unutar roditeljske klase postoji. &lt;/p&gt;
&lt;p&gt;Naredba &lt;code&gt;super()&lt;/code&gt; za poziv roditeljskog konstruktora mora biti prva naredba unutar tela konstruktorske metode. &lt;/p&gt;
&lt;h2 id="polimorfizam"&gt;Polimorfizam&lt;/h2&gt;
&lt;p&gt;Prilikom realizovanja nasleđivanja u objektno orijentisanom programiranju, veoma često dolazi do potrebe za redefinisanjem nekih nasleđenih ponašanja. Tako roditeljski objekat može definisati neku funkcionalnost koja ne zadovoljava u potpunosti njegove naslednike. Tako naslednici imaju mogućnost da nasleđeno ponašanje prilagode, dopune ili u potpunosti izmene. Na taj način se stvaraju različite verzije jednog istog ponašanja, odnosno verzije koje odgovaraju svakom pojedinačnom tipu objekata. Takva osobina objektno orijentisanog programiranja drugačije se naziva polimorfizam, odnosno višestruko značenje jednog istog pojma. &lt;/p&gt;
&lt;p&gt;Upravo opisana situacija postoji i unutar prikazanog primera. Naime, svaka od klasa poseduje metodu &lt;code&gt;toString()&lt;/code&gt;, pri čemu je logika takve metode unutar svake od klasa različita. Metoda &lt;code&gt;toString()&lt;/code&gt; potiče iz korene klase Java jezika - klase &lt;code&gt;Object&lt;/code&gt;. To je jedna od nekoliko metoda koje postoje unutar ove klase i koje stoga nasleđuju sve ostale Java klase, kako one koje su ugrađene tako i one koje samostalno kreiramo. Upravo zbog toga i sve naše klase poseduju takvu metodu, bez ikakve potrebe da njenu logiku samostalno definišu. Ipak, izvorna logika &lt;code&gt;toString()&lt;/code&gt; metode ne odgovara u potpunosti klasama koje smo mi samostalno kreirali. Kako biste ovo bolje razumeli, evo kako metoda &lt;code&gt;toString()&lt;/code&gt; izgleda u svom izvornom obliku, unutar klase &lt;code&gt;Object&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; getClass().&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getName&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"@"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Integer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;toHexString&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(hashCode());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Izvorna logika &lt;code&gt;toString()&lt;/code&gt; metode je takva da se unutar nje formira tekst koji se sastoji iz naziva klase kome sledi jedinstveni kod koji objekti dobijaju od strane virtualne mašine prilikom njihovog kreiranja. Reč je o kodu koji se dobija korišćenjem još jedne metode koja postoji unutar Object klase - metode &lt;code&gt;hashCode()&lt;/code&gt;. Izvorna logika metode &lt;code&gt;toString()&lt;/code&gt;, kao što možete da pretpostavite, daje prilično uopštenu tekstualnu reprezentaciju objekata. Na primeru klase &lt;code&gt;Product&lt;/code&gt;, tekstualna reprezentacija jednog objekta dobijena od ovakve izvorne logike bi izgledala ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Product@378bf509
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pored naziva klase, ovakav tekst za krajnjeg korisnika ne poseduje bilo kakve značajne informacije. Upravo zbog toga se u svakoj klasi koju smo samostalno kreirali u ovoj lekciji pribegava redefinisanju metode &lt;code&gt;toString()&lt;/code&gt;. Tako sve klase poseduju sopstvenu logiku ove metode, koja odgovara skupu svojstava koja se unutar njih nalaze. Ovo je svojevrstan primer polimorfizma, odnosno višestrukog značenja jednog istog pojma. &lt;/p&gt;
&lt;p&gt;Proces redefinisanja propraćen je i upotrebom jedne posebne oznake (anotacije) koja se postavlja pre potpisa metode koja se redefiniše. Kako bi se naznačilo da je reč o redefinisanoj metodi, odnosno kako bi se naglasilo da metoda sa istim nazivom postoji i unutar roditeljske klase, pre potpisa metode postavlja se anotacija &lt;code&gt;@Override&lt;/code&gt;. Bitno je znati da postavljanje anotacije &lt;code&gt;@Override&lt;/code&gt; nije obavezno, odnosno da neće stvoriti grešku prilikom kompajliranja ili izvršavanja. Ipak, njeno korišćenje jeste dobra praksa, zato što poboljšava preglednost, jasno signalizirajući da je određena metoda redefinisana. Redefinisanje metoda se drugačije naziva &lt;strong&gt;overriding&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Još jedan primer polimorfizma u Java programskom jeziku jeste mogućnost postojanja više metoda sa identičnim nazivima unutar jedne klase. Takvu situaciju je najbolje videti na primeru konstruktora. Naime, unutar jedne Java klase može postojati nekoliko konstruktora. Naravno, svi oni imaju identičan naziv koji odgovara nazivu klase, ali je neophodno da poseduju različite ulazne parametre: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Product&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String brand, String model, &lt;/span&gt;&lt;span style="color: #fec418"&gt;double&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;brand&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; brand;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;model&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;price&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; price;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod prikazuje dva konstruktora unutar klase &lt;code&gt;Product&lt;/code&gt;. Naravno, i regularne metode se mogu upotrebiti u ovom obliku, sve dok poseduju različite ulazne parametre: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sum&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;sum&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; c) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; c;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo su sada dve metode za sabiranje, koje poseduju identične nazive - &lt;code&gt;sum()&lt;/code&gt;. Ipak, prva prihvata dva parametra, a druga tri, pa je njihovo postojanje unutar iste klase potpuno legitimno. Ovakva situacija se u Javi naziva &lt;strong&gt;overloading&lt;/strong&gt;, odnosno preklapanje metoda i još jedan je od svojevrsnih primera polimorfizma.&lt;/p&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="objekti"></category><category term="klase"></category><category term="apstrakcija"></category><category term="enkapsulacija"></category><category term="nasleđivanje"></category><category term="polimorfizam"></category></entry></feed>