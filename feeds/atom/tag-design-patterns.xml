<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DP Tech - design patterns</title><link href="https://vlajna95.github.io/" rel="alternate"></link><link href="https://vlajna95.github.io/feeds/atom/tag-design-patterns.xml" rel="self"></link><id>https://vlajna95.github.io/</id><updated>2022-05-22T08:44:00+02:00</updated><subtitle>Tvoj omiljeni blog</subtitle><entry><title>AJP 1.6. Dizajn šabloni</title><link href="https://vlajna95.github.io/articles/ajp-16-dizajn-sabloni" rel="alternate"></link><published>2022-05-22T08:44:00+02:00</published><updated>2022-05-22T08:44:00+02:00</updated><author><name>Danijela Popović</name></author><id>tag:vlajna95.github.io,2022-05-22:/articles/ajp-16-dizajn-sabloni</id><summary type="html">&lt;p&gt;Primena dizajn šablona u programskom jeziku Java&lt;/p&gt;</summary><content type="html">
&lt;hr/&gt;
&lt;p&gt;Obrisi modernog programiranja datiraju od pre više od 30 godina. Tokom tog vremenskog perioda, programski jezici su korišćeni za rešavanje različitih problema. Ipak, veliki broj problema u programiranju iznova se i iznova ponavlja bez obzira na to o kojoj vrsti softverskog proizvoda je reč. Takvi česti problemi su tokom vremena detektovani i za njih su se ustalila određena rešenja, koja su se u praksi pokazala kao dobra. Reč je o rešenjima koja su artikulisana pojmom softverskih dizajn šablona. Njima će biti posvećena lekcija koja je pred vama. &lt;/p&gt;
&lt;h2 id="sta-su-softverski-dizajn-sabloni"&gt;Šta su softverski dizajn šabloni?&lt;/h2&gt;
&lt;p&gt;Softverski dizajn šabloni (&lt;em&gt;software design patterns&lt;/em&gt;) opisuju rešenja veoma čestih problema do kojih dolazi prilikom dizajniranja unutrašnje strukture nekog softverskog proizvoda. Reč je, zapravo, o dokazanim pristupima, odnosno praksama koje su se tokom vremena pokazale kao dobre. &lt;/p&gt;
&lt;p&gt;Bitno je razumeti da dizajn šabloni nisu gotova rešenja, već samo generalizovana, koncizna uputstva koja se mogu koristiti za konkretnu implementaciju rešenja. Stoga dizajn šabloni nisu vezani ni za jedan programski jezik, pa se njihova načela mogu primeniti prilikom kreiranja različitih tipova aplikacija, za različite platforme. &lt;/p&gt;
&lt;p&gt;Korišćenjem softverskih dizajn šablona ubrzava se proizvodnja, naročito ukoliko se ona odvija u timskom okruženju. Naime, realizacija softverskih dizajn šablona široko je poznata, pa programeri koji rade na istom projektu mnogo lakše mogu da se snađu u kodu koji je pisao neki drugi programer. &lt;/p&gt;
&lt;h2 id="koji-dizajn-sabloni-postoje"&gt;Koji dizajn šabloni postoje?&lt;/h2&gt;
&lt;p&gt;Svi softverski dizajn šabloni se dele na tri grupe: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;šabloni kreiranja (&lt;em&gt;creational patterns&lt;/em&gt;) &lt;/li&gt;
&lt;li&gt;strukturni šabloni (&lt;em&gt;structural patterns&lt;/em&gt;) &lt;/li&gt;
&lt;li&gt;šabloni ponašanja (&lt;em&gt;behavioral patterns&lt;/em&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sve tri upravo navedene grupe poseduju ilustrativne nazive, koji oslikavaju intuitivno upotrebno okruženje šablona koji pripadaju konkretnoj grupi. Svaka od grupa poseduje veliki broj različitih šablona. U ovoj lekciji biće ilustrovana načela nekoliko najpoznatijih dizajn šablona i njihova realizacija u programskom jeziku Java: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observer&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Factory&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decorator&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="singleton"&gt;&lt;strong&gt;Singleton&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; je dizajn šablon koji propisuje postojanje samo jedne instance nekog tipa. Drugim rečima, &lt;strong&gt;Singleton&lt;/strong&gt; nalaže rukovanje nekim tipom koje se uvek obavlja korišćenjem jedne iste instance. Tako uz poštovanje &lt;strong&gt;Singleton&lt;/strong&gt; šablona nije moguće kreirati dva objekta jednog istog tipa. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; je jedan od najpopularnijih softverskih dizajn šablona, koji se primenjuje prilikom programiranja različitih aspekata aplikacija koje zahtevaju postojanje samo jednog objekta tokom čitavog životnog toka aplikacije. &lt;/p&gt;
&lt;p&gt;U dosadašnjem toku ovog kursa u više navrata ste imali prilike da vidite da se korišćenjem jedne klase može napraviti proizvoljan broj instanci, odnosno objekata: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Product product1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Product product2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Product();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product1.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(product2));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prikazani kod će proizvesti rezultat &lt;code&gt;false&lt;/code&gt;, jer promenljive &lt;code&gt;product1&lt;/code&gt; i &lt;code&gt;product2&lt;/code&gt; čuvaju reference na dva potpuno nezavisna objekta klase &lt;code&gt;Product&lt;/code&gt;. Ovo je ponašanje sa kojim smo se do sada susretali, a kao što je rečeno, podrazumeva da se na osnovu jedne klase može kreirati proizvoljan broj nezavisnih instanci (slika 6.1). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.1. Na osnovu regularne klase moguće je kreirati proizvoljan broj objekata" src="/images/AdvancedJavaProgramming/1_06_01.png"/&gt;
&lt;figcaption&gt;Slika 6.1. Na osnovu regularne klase moguće je kreirati proizvoljan broj objekata&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ipak, u nekim situacijama može se javiti potreba da se definiše ponašanje po kojem se određena klasa može instancirati samo jednom. Upravo to osigurava &lt;strong&gt;Singleton&lt;/strong&gt; dizajn šablon (slika 6.2). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.2. Singleton klasa može imati samo jednu instancu" src="/images/AdvancedJavaProgramming/1_06_02.png"/&gt;
&lt;figcaption&gt;Slika 6.2. Singleton klasa može imati samo jednu instancu&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Sa slike 6.2. se može videti da &lt;strong&gt;Singleton&lt;/strong&gt; osigurava da se svakim instanciranjem jedne klase dobija identična instanca. &lt;/p&gt;
&lt;p&gt;U Java programskom jeziku, &lt;strong&gt;Singleton&lt;/strong&gt; se realizuje vrlo jednostavno. Potrebno je obaviti nekoliko koraka koji su ilustrovani u nastavku. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Onemogućavanje direktnog instanciranja klase &lt;br/&gt;
    Pod direktnim instanciranjem klase podrazumeva se instanciranje upotrebom ključne reči &lt;code&gt;new&lt;/code&gt; i pozivom konstruktora. Kako bi se tako nešto onemogućilo izvan klase, dovoljno je unutar klase definisati privatni konstruktor: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kreiranje polja koje će čuvati referencu na instancu klase &lt;br/&gt;
    S obzirom na to da se kod &lt;strong&gt;Singleton&lt;/strong&gt; šablona klasa ne može instancirati na tradicionalni način, neophodno je unutar nje definisati mehanizam za predstavljanje instance. Tako se kod &lt;strong&gt;Singleton&lt;/strong&gt; šablona instanca čuva unutar privatnog, statičkog polja klase: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kreiranje mehanizma za pristup instanci &lt;strong&gt;Singletona&lt;/strong&gt; &lt;br/&gt;
    Kada imamo polje za čuvanje instance, preostaje da se definiše i javna metoda za pristup takvom polju: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;span class="filename"&gt;Logger.java&lt;/span&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;instance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			instance &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Metoda za dobijanje instance imenovana je nazivom &lt;code&gt;getInstance()&lt;/code&gt;. Unutar nje se obavlja vrlo jednostavna logika. Proverava se da li je instanca klase &lt;code&gt;Logger&lt;/code&gt; već kreirana i samo ukoliko nije, obavlja se njeno kreiranje. Ukoliko instanca već postoji, kao povratna vrednost se isporučuje njena referenca, čime se osigurava da će svakim pozivanjem metode &lt;code&gt;getInstance()&lt;/code&gt; biti isporučena referenca na istovetan objekat klase &lt;code&gt;Logger&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Ukoliko pokušamo da upravo kreiranu klasu instanciramo na tradicionalni način, doći će do greške, s obzirom na to da je konstruktor privatan. Kako bi se dobio objekat &lt;strong&gt;Singleton&lt;/strong&gt; klase, koristi se sledeći pristup: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Logger logger &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Vrlo je bitno razumeti da će svako pozivanje  &lt;code&gt;getInstance()&lt;/code&gt; metode imati za efekat isporučivanje reference na identičan objekat, u šta se lako možemo uveriti: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Logger.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Logger&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;instance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;==&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			instance &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; instance;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Program1.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Logger logger &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Logger logger1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getInstance&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(logger.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(logger1));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Za razliku od primera sa početka ove lekcije, prikazani kod sada proizvodi vrednost &lt;code&gt;true&lt;/code&gt;, što jasno govori da je reč o dve promenljive koje čuvaju referencu na identičan objekat. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Klasa &lt;code&gt;Logger&lt;/code&gt;&lt;/strong&gt; &lt;br/&gt;
Naziv upravo kreirane &lt;strong&gt;Singleton&lt;/strong&gt; klase nije izabran slučajno. Naime, jedna od realnih situacija za upotrebu &lt;strong&gt;Singleton&lt;/strong&gt; šablona jesu situacije u kojima je potrebno napraviti klasu za logovanje informacija o unutrašnjem funkcionisanju programa. Veoma česta praksa u realnim aplikacijama jeste postojanje takve klase, koja unutar fajla ili posebnog skladišta podataka beleži sve informacije koje mogu biti značajne za programere koji su aplikaciju kreirali. Tokom izvršavanja aplikacije, potrebno je da postoji samo jedna instanca klase za logovanje. Drugim rečima, postojanje većeg broja instanci klase za logovanje nema smisla, pa je upravo zbog toga klasa &lt;code&gt;Logger&lt;/code&gt; idealan kandidat za demonstraciju &lt;strong&gt;Singleton&lt;/strong&gt; dizajn šablona. &lt;/p&gt;
&lt;div class="question"&gt;
&lt;p&gt;Ukoliko je potrebno osigurati da određena klasa ima samo jednu instancu, koji šablon za dizajn softverskih komponenti se koristi? &lt;/p&gt;
&lt;div class="answers"&gt;&lt;input id="single_instance_correct" name="single_instance_correct" type="hidden" value="notelgnis"/&gt;&lt;input id="cvm" name="single_instance" type="radio" value="MVC"/&gt;&lt;label for="cvm"&gt;MVC&lt;/label&gt;&lt;br/&gt;
&lt;input id="revresbo" name="single_instance" type="radio" value="Observer"/&gt;&lt;label for="revresbo"&gt;Observer&lt;/label&gt;&lt;br/&gt;
&lt;input id="notelgnis" name="single_instance" type="radio" value="Singleton"/&gt;&lt;label for="notelgnis"&gt;Singleton&lt;/label&gt;&lt;br/&gt;
&lt;input id="yrotcaf" name="single_instance" type="radio" value="Factory"/&gt;&lt;label for="yrotcaf"&gt;Factory&lt;/label&gt;&lt;br/&gt;
&lt;/div&gt;
&lt;button class="ok" data-correct="single_instance_correct" data-question="single_instance" onclick="checkAnswer(this, 'Bravo!', 'Hmmm... no.')" type="button"&gt;OK&lt;/button&gt;&lt;/div&gt;
&lt;h2 id="observer"&gt;&lt;strong&gt;Observer&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Observer&lt;/strong&gt; je jedan od najpoznatijih šablona ponašanja. On omogućava razmenu obaveštenja između većeg broja objekata. Drugim rečima, &lt;strong&gt;Observer&lt;/strong&gt; šablon omogućava da se stanje jednog objekta emituje različitim objektima koji taj objekat nadgledaju (slika 6.3). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.3. Način funkcionisanja Observer dizajn šablona" src="/images/AdvancedJavaProgramming/1_06_03.png"/&gt;
&lt;figcaption&gt;Slika 6.3. Način funkcionisanja Observer dizajn šablona&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Na slici 6.3. možete da vidite najznačajnije elemente koji postoje unutar &lt;strong&gt;Observer&lt;/strong&gt; šablona. Ovaj šablon poznaje dve vrste objekata: objekte tipa &lt;strong&gt;Observer&lt;/strong&gt; i &lt;strong&gt;Observable&lt;/strong&gt;. Kako bi se postigla što bolja apstrakcija i univerzalnost, ova dva tipa se predstavljaju intefejsima. &lt;strong&gt;Observer&lt;/strong&gt; implementiraju svi konkretni tipovi koji žele da dobijaju obaveštenja, dok interfejs &lt;strong&gt;Observable&lt;/strong&gt; implementiraju tipovi koji imaju potrebu da generišu i šalju obaveštenja. Konkretni tipovi koji generišu obaveštanje u &lt;strong&gt;Observer&lt;/strong&gt; šablonu se nazivaju &lt;em&gt;Subject&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Nije teško zaključiti da se na &lt;strong&gt;Observer&lt;/strong&gt; šablonu zasniva razmena događaja između objekata, što je pristup koji je obrađen u jednoj od prethodnih lekcija. Stoga smo se mi sa &lt;strong&gt;Observer&lt;/strong&gt; šablonom već susretali, pa će u nastavku biti prikazan nešto jednostavniji primer, koji će se fokusirati isključivo na osnovne osobine ovog šablona. &lt;/p&gt;
&lt;p&gt;Kako bismo demonstrirali &lt;strong&gt;Observer&lt;/strong&gt; šablon, prvo ćemo kreirati dva interfejsa, koji će predstavljati dva tipa objekata koji učestvuju u komunikaciji. Objekti koji mogu da budu obavešteni o nečemu zasnivaju se na ovakvom interfejsu: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Observer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Observer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String args);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Objekti koji će moći da proizvedu obaveštenja zasnivaće se na ovakvom interfejsu: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Observable.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;interface&lt;/span&gt; &lt;span style="color: #fec418"&gt;Observable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer s);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer s);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String msg);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Nakon kreiranja interfejsa, oni se mogu iskoristiti za izgradnju konkretnih tipova. Evo prvo klase koja će poslužiti za kreiranje objekata koji će moći da primaju obaveštenja: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;ObserverA.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;ObserverA&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	String name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;ObserverA&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String name){&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;name&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String msg) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer "&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; name &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #48b685"&gt;". Message from observable: "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; msg);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Radi jednostavnosti primera, čim stigne poruka od objekta koji se nadzire, takva poruka će biti ispisana na izlazu. Pri tome svaki objekat tipa &lt;strong&gt;Observer&lt;/strong&gt; poseduje i sopstveno ime koje se definiše prilikom instanciranja klase. &lt;/p&gt;
&lt;p&gt;Klasa koja će predstavljati objekte koji će moći da šalju obaveštenja nešto je kompleksnija, zato što se unutar nje moraju implementirati tri metode i jedno svojstvo koje će čuvati referencu na niz pretplatnika: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Subject.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Subject&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; observers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer observer) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newObservers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		newObservers&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; observer;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		observers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Observer observer) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;; i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;++&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;if&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (observer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;equals&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;i&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;)) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;				indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; i;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Observer&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newObservers, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;0&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, indexOfElementToRemove);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;arraycopy&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(observers, indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, newObservers, indexOfElementToRemove, observers.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;length&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; indexOfElementToRemove &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;1&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		observers &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; newObservers;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;@Override&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String msg) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;for&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (Observer observer : observers) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			observer.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;update&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(msg);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Kako bismo se uverili da sve funkcioniše ispravno, unutar &lt;code&gt;main()&lt;/code&gt; metode našeg Java programa postavićemo sledeći kod: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program2.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Subject subject &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Subject();&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer o1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ObserverA(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer 1"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer o2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ObserverA(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer 2"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		Observer o3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; ObserverA(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Observer 3"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;addObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o3);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"new update"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o2);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;removeObserver&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(o1);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		subject.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;notifyObservers&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"new update1"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Primer proizvodi sledeći rezultat: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Observer Observer &lt;span style="color: #f99b15"&gt;1&lt;/span&gt;. Message from observable: new update
Observer Observer &lt;span style="color: #f99b15"&gt;2&lt;/span&gt;. Message from observable: new update
Observer Observer &lt;span style="color: #f99b15"&gt;3&lt;/span&gt;. Message from observable: new update
Observer Observer &lt;span style="color: #f99b15"&gt;3&lt;/span&gt;. Message from observable: new update1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;S obzirom na to da su prilikom slanja prve poruke sva tri objekta u listi pretplatnika, aktiviraju se &lt;code&gt;update()&lt;/code&gt; metode u tri objekta koji predstavljaju pretplatnike. Nakon uklanjanja pretplatnika &lt;code&gt;o2&lt;/code&gt; i &lt;code&gt;o1&lt;/code&gt; iz liste, sledeće ažuriranje podrazumeva slanje poruke samo jednom pretplatniku - &lt;code&gt;o3&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="factory"&gt;&lt;strong&gt;Factory&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Factory&lt;/strong&gt; je šablon kreiranja koji se koristi kada je potrebno kreirati posredničku klasu za kreiranje objekata određenog tipa. Drugim rečima, objekti određenog tipa se ne kreiraju na tradicionalni način, upotrebom konstruktora i ključne reči &lt;code&gt;new&lt;/code&gt;, već posredstvom specijalne klase koja se naziva kao i sam šablon - &lt;code&gt;Factory&lt;/code&gt;. Sve to izgleda kao na slici 6.4. &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.4. Factory klasa" src="/images/AdvancedJavaProgramming/1_06_04.png"/&gt;
&lt;figcaption&gt;Slika 6.4. Factory klasa&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Factory&lt;/strong&gt; šablon će u nastavku biti ilustrovan jednim primerom koji će modelovati nekoliko različitih vrsta korisnika. Naime, česta je praksa da se u aplikacijima koje rukuju korisnicima oni dele na nekoliko grupa, u zavisnosti od privilegaija koje imaju prilikom korišćenja aplikacije. Upravo jedan takav primer, u kome će postojati tri različite vrste korisnika, biće prikazan u nastavku. Tipovi korisnika će biti: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Viewer&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Admin&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Superuser&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Upravo prikazani tipovi korisnika u našem primeru ujedno će biti i konkretne klase koje će se koristiti za modelovanje odgovarajućeg tipa korisnika. S obzirom na to da su srodne, sve one mogu da naslede zajedničku apstraktnu klasu &lt;code&gt;User&lt;/code&gt;, koja može poslužiti za definisanje nekih zajedničkih osobina svih korisnika: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;User.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;abstract&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;User&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String username;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;User&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; username;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Klasa &lt;code&gt;User&lt;/code&gt; je apstraktna i unutar sebe poseduje samo jedno svojstvo, kojim se definiše korisničko ime. Konstruktor prihvata jedan parametar i njime se inicijalizuje svojstvo &lt;code&gt;username&lt;/code&gt;. Ovakvu klasu nasleđuju tri konkretne klase. &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Viewer.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Viewer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Viewer&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Viewer "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;" created."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Admin.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Admin&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Admin&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Admin "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;" created."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;Superuser.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Superuser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;extends&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Superuser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;super&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Superuser "&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;username&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;" created."&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Radi jednostavnosti, sve prikazane klase poseduju minimalnu logiku, odnosno samo konstruktor unutar koga se prvo poziva konstruktor roditeljske klase, a zatim se ispisuje poruka da je korisnik odgovarajućeg tipa i imena kreiran. &lt;/p&gt;
&lt;p&gt;Svaka od upravo kreiranih klasa može se instancirati na standardni način. Na primer: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;Viewer viewer &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Viewer(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"John"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Admin admin &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Admin(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Jack"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;Superuser boss &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Superuser(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"Josh"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na ovaj način se u programu kreira po jedan korisnik svakog tipa. Kreiranje objekata biće propraćeno ispisom sledećih poruka unutar konzole: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Viewer John created.
Admin Jack created.
Superuser Josh created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Veoma česta situacija u realnim aplikacijama prilikom rukovanja korisnicima jeste to da njihov tip nije unapred poznat, već se utvrđuje dinamički, tokom izvršavanja aplikacije. To praktično znači da većina aplikacija poseduje neku vrstu forme za prijavljivanje u koju je neophodno uneti korisničko ime i lozinku. Na osnovu unetih podataka, aplikacija utvrđuje o kojoj vrsti korisnika je reč, odnosno da li je korisnik tipa &lt;code&gt;Viewer&lt;/code&gt;, &lt;code&gt;Admin&lt;/code&gt; ili &lt;code&gt;Superuser&lt;/code&gt;. Stoga se veoma često može dogoditi da na više mesta unutar svoje aplikacije posedujemo kod koji može da izgleda ovako: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;User user &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;switch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(userType) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"viewer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Viewer(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"admin"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Admin(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"superuser"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Superuser(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;default&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ovo je jedna uslovna konstrukcija u kojoj se u zavisnosti od vrednosti kontrolne promenljive (&lt;code&gt;userType&lt;/code&gt;) obavlja instanciranje odgovarajuće klase koja predstavlja korisnika. S obzirom na to da su velike šanse da će ovakva provera biti potrebna na više mesta unutar aplikacije, idealno je nju enkapsulirati unutar jedne &lt;strong&gt;Factory&lt;/strong&gt; klase: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;UserFactory.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;UserFactory&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; User &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String userType, String username) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		User user &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;switch&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(userType) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"viewer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Viewer(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"admin"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Admin(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;case&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #48b685"&gt;"superuser"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Superuser(username);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;			&lt;/span&gt;&lt;span style="color: #815ba4"&gt;default&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;null&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		};&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; user;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Ovo je klasičan primer &lt;strong&gt;Factory&lt;/strong&gt; dizajn šablona na delu. Kreirana je nova &lt;code&gt;UserFactory&lt;/code&gt; klasa, kao centralizovano mesto za instanciranje objekata koji predstavljaju korisnike. Sada se objekti korisnika mogu kreirati na sledeći način: &lt;/p&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #c7c7c7"&gt;User user1 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; UserFactory.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"admin"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Ron"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;User user2 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; UserFactory.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"viewer"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Ben"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;User user3 &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; UserFactory.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;newUser&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #48b685"&gt;"superuser"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #48b685"&gt;"Tom"&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na ovaj način su centralizovano kreirana tri objekta korisnika različitog tipa. Kod će na izlazu proizvesti sledeći ispis: &lt;br/&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Admin Ron created.
Viewer Ben created.
Superuser Tom created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id="decorator"&gt;&lt;strong&gt;Decorator&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Decorator&lt;/strong&gt; je strukturni šablon koji omogućava dodavanje, odnosno proširivanje funkcionalnosti postojećih tipova. Implementira se kreiranjem posebne klase koja se naziva &lt;code&gt;Decorator&lt;/code&gt;, unutar koje se objekti nekog tipa proširuju dodatnim osobinama ili funkcionalnostima. Tako &lt;strong&gt;Decorator&lt;/strong&gt; šablon omogućava da se mogućnosti tipova prošire bez klasičnog nasleđivanja. Drugim rečima, &lt;code&gt;Decorator&lt;/code&gt; klasa nije u direktnoj hijerarhijskoj vezi sa klasom koju dekoriše, već predstavlja neku vrstu njenog omotača (slika 6.5). &lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Slika 6.5. Decorator šablon" src="/images/AdvancedJavaProgramming/1_06_05.png"/&gt;
&lt;figcaption&gt;Slika 6.5. Decorator šablon&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Decorator&lt;/strong&gt; šablon će biti ilustrovan na primeru jednog tipa kojim se u Java programu predstavljaju pravougaonici: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Rectangle.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;Rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(&lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a, &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; a;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; b;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Klasa &lt;code&gt;Rectangle&lt;/code&gt; koristi se za modelovanje pravougaonika. Svojstva &lt;code&gt;a&lt;/code&gt; i &lt;code&gt;b&lt;/code&gt; se koriste za predstavljanje dužine stranica, čije vrednosti je moguće postaviti korišćenjem konstruktora koji prihvata dva parametra. Pored toga, klasa &lt;code&gt;Rectangle&lt;/code&gt; poseduje i metodu za računanje površine sa nazivom &lt;code&gt;area()&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Korišćenjem &lt;strong&gt;Decorator&lt;/strong&gt; šablona, objekti upravo kreirane klase se mogu proširiti na sledeći način: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;RectangleDecorator.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;RectangleDecorator&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;protected&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Rectangle rectangle;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;RectangleDecorator&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(Rectangle rectangle) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; rectangle;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;int&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;*&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; (&lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;a&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;+&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;this&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;b&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;);&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;code&gt;RectangleDecorator&lt;/code&gt; je klasičam primer implementacije &lt;strong&gt;Decorator&lt;/strong&gt; šablona. Unutar ove klase obavlja se proširivanje funkcionalnosti &lt;code&gt;Rectangle&lt;/code&gt; objekata jednom novom metodom koja je namenjena računanju obima. &lt;/p&gt;
&lt;p&gt;Konačno, evo kako može da izgleda upotreba &lt;code&gt;Decorator&lt;/code&gt; klase: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Program3.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;Program3&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;static&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;main&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String&lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;[]&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; args) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		RectangleDecorator rd &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; RectangleDecorator(&lt;/span&gt;&lt;span style="color: #815ba4"&gt;new&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Rectangle(&lt;/span&gt;&lt;span style="color: #f99b15"&gt;2&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;, &lt;/span&gt;&lt;span style="color: #f99b15"&gt;3&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;));&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(rd.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;rectangle&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;area&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		System.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;out&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;println&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(rd.&lt;/span&gt;&lt;span style="color: #06b6ef"&gt;perimeter&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;());&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Prikazanim naredbama obavljeno je kreiranje objekta &lt;code&gt;RectangleDecorator&lt;/code&gt; klase. Prilikom kreiranja takvog objekta, konstruktoru je prosleđen objekat &lt;code&gt;Rectangle&lt;/code&gt; klase koji će &lt;code&gt;Decorator&lt;/code&gt; da proširi. Nakon toga se obavlja računanje površine i obima i rezultati se prikazuju na izlazu. &lt;/p&gt;
&lt;h2 id="javabeans-konvencija"&gt;&lt;strong&gt;JavaBeans konvencija&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Kada već govorimo o softverskim dizajn šablonima i različitim dobrim praksama za kreiranje unutrašnje objektne strukture Java programa, dobro je spomenuti još jedan pojam koji je značajan za Java jezik. Naime, u Java jeziku postoji jedna konvencija, odnosno standard koji se naziva &lt;strong&gt;JavaBeans&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;JavaBeans je konvencija koja definiše osobine tipova koji se nazivaju Java Bean. Java Bean je zapravo svaka klasa koja zadovoljava nekoliko jednostavnih pravila: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;klasa mora imati javni konstruktor bez parametara &lt;/li&gt;
&lt;li&gt;polja klase moraju biti privatna i moraju postojati odgovarajuće javne &lt;code&gt;get&lt;/code&gt; i &lt;code&gt;set&lt;/code&gt; metode za rukovanje njima izvan matične klase &lt;/li&gt;
&lt;li&gt;klasa mora implementirati interfejs &lt;code&gt;Serializable&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaBeans konvencija je primarno namenjena za kreiranje softverskih komponenti grafičkog korisničkog okruženja. O kreiranju grafičkog okruženja još nismo govorili, ali je bitno da znate da se pojedinačne komponente takvog okruženja predstavljaju objektima, odnosno instancama nekih klasa. Takođe, grafička okruženja se najčešće kreiraju pomoću određenih pomagala – grafičkih editora. Kako bi takvi editori mogli da funkcionišu adekvatno, oni se oslanjaju na upravo spomenutu konvenciju JavaBeans. Ipak, JavaBeans konvencija nije ograničena na komponente grafičkog korisničkog okruženja, pa se s njom možemo susresti i prilikom rada sa raznim drugim celinama Java platforme. &lt;/p&gt;
&lt;p&gt;Evo kako može izgledati jedna klasa koja zadovoljava JavaBeans konvenciju: &lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;CarBean.java&lt;/summary&gt;
&lt;div class="highlight" style="background: #000000"&gt;&lt;pre style="line-height: 125%;"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #5bc4bf"&gt;import&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;java.io.Serializable&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;;&lt;/span&gt;

&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;class&lt;/span&gt; &lt;span style="color: #fec418"&gt;CarBean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #815ba4"&gt;implements&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; Serializable {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String make;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;private&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;CarBean&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getMake&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; make;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setMake&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		make &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; String &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;getModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;() {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		&lt;/span&gt;&lt;span style="color: #815ba4"&gt;return&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; model;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	&lt;/span&gt;&lt;span style="color: #815ba4"&gt;public&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #fec418"&gt;void&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; &lt;/span&gt;&lt;span style="color: #06b6ef"&gt;setModel&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt;(String value) {&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;		model &lt;/span&gt;&lt;span style="color: #5bc4bf"&gt;=&lt;/span&gt;&lt;span style="color: #c7c7c7"&gt; value;&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;	}&lt;/span&gt;
&lt;span style="color: #c7c7c7"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Kod ilustruje klasu sa nazivom &lt;code&gt;CarBean&lt;/code&gt;. Reč je o klasi koja u potpunosti zadovoljava &lt;strong&gt;JavaBeans&lt;/strong&gt; konvenciju: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;klasa implementira interfejs &lt;code&gt;Serializable&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;klasa poseduje javni konstruktor, bez parametara &lt;/li&gt;
&lt;li&gt;polja unutar klase su privatna i postoje &lt;code&gt;get&lt;/code&gt; i &lt;code&gt;set&lt;/code&gt; metode kako bi se njima rukovalo izvan klase&lt;/li&gt;
&lt;/ul&gt;</content><category term="IT akademija/Advanced Java Programming/AJP - Modul 1. Napredno objektno programiranje"></category><category term="Java"></category><category term="OOP"></category><category term="programiranje"></category><category term="dizajn šabloni"></category><category term="design patterns"></category></entry></feed>